// This file was autogenerated by some hot garbage in the
// `uniffi-bindgen-react-native` crate. Trust me, you don't want to mess with
// it!
#include "lwk.hpp"

#include "UniffiJsiTypes.h"
#include <iostream>
#include <map>
#include <stdexcept>
#include <thread>
#include <utility>

namespace react = facebook::react;
namespace jsi = facebook::jsi;

// Calling into Rust.
extern "C" {
typedef void (*UniffiRustFutureContinuationCallback)(uint64_t data,
                                                     int8_t poll_result);
typedef void (*UniffiForeignFutureFree)(uint64_t handle);
typedef void (*UniffiCallbackInterfaceFree)(uint64_t handle);
typedef struct UniffiForeignFuture {
  uint64_t handle;
  UniffiForeignFutureFree free;
} UniffiForeignFuture;
typedef struct UniffiForeignFutureStructU8 {
  uint8_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU8;
typedef void (*UniffiForeignFutureCompleteU8)(
    uint64_t callback_data, UniffiForeignFutureStructU8 result);
typedef struct UniffiForeignFutureStructI8 {
  int8_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI8;
typedef void (*UniffiForeignFutureCompleteI8)(
    uint64_t callback_data, UniffiForeignFutureStructI8 result);
typedef struct UniffiForeignFutureStructU16 {
  uint16_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU16;
typedef void (*UniffiForeignFutureCompleteU16)(
    uint64_t callback_data, UniffiForeignFutureStructU16 result);
typedef struct UniffiForeignFutureStructI16 {
  int16_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI16;
typedef void (*UniffiForeignFutureCompleteI16)(
    uint64_t callback_data, UniffiForeignFutureStructI16 result);
typedef struct UniffiForeignFutureStructU32 {
  uint32_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU32;
typedef void (*UniffiForeignFutureCompleteU32)(
    uint64_t callback_data, UniffiForeignFutureStructU32 result);
typedef struct UniffiForeignFutureStructI32 {
  int32_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI32;
typedef void (*UniffiForeignFutureCompleteI32)(
    uint64_t callback_data, UniffiForeignFutureStructI32 result);
typedef struct UniffiForeignFutureStructU64 {
  uint64_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU64;
typedef void (*UniffiForeignFutureCompleteU64)(
    uint64_t callback_data, UniffiForeignFutureStructU64 result);
typedef struct UniffiForeignFutureStructI64 {
  int64_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI64;
typedef void (*UniffiForeignFutureCompleteI64)(
    uint64_t callback_data, UniffiForeignFutureStructI64 result);
typedef struct UniffiForeignFutureStructF32 {
  float return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructF32;
typedef void (*UniffiForeignFutureCompleteF32)(
    uint64_t callback_data, UniffiForeignFutureStructF32 result);
typedef struct UniffiForeignFutureStructF64 {
  double return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructF64;
typedef void (*UniffiForeignFutureCompleteF64)(
    uint64_t callback_data, UniffiForeignFutureStructF64 result);
typedef struct UniffiForeignFutureStructPointer {
  void *return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructPointer;
typedef void (*UniffiForeignFutureCompletePointer)(
    uint64_t callback_data, UniffiForeignFutureStructPointer result);
typedef struct UniffiForeignFutureStructRustBuffer {
  RustBuffer return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructRustBuffer;
typedef void (*UniffiForeignFutureCompleteRustBuffer)(
    uint64_t callback_data, UniffiForeignFutureStructRustBuffer result);
typedef struct UniffiForeignFutureStructVoid {
  RustCallStatus call_status;
} UniffiForeignFutureStructVoid;
typedef void (*UniffiForeignFutureCompleteVoid)(
    uint64_t callback_data, UniffiForeignFutureStructVoid result);
typedef void (*UniffiCallbackInterfaceForeignPersisterMethod0)(
    uint64_t uniffi_handle, uint64_t index, RustBuffer *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceForeignPersisterMethod1)(
    uint64_t uniffi_handle, void *update, void *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef struct UniffiVTableCallbackInterfaceForeignPersister {
  UniffiCallbackInterfaceForeignPersisterMethod0 get;
  UniffiCallbackInterfaceForeignPersisterMethod1 push;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceForeignPersister;
void *uniffi_lwk_fn_clone_address(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_address(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_address_new(RustBuffer s,
                                            RustCallStatus *uniffi_out_err);
int8_t uniffi_lwk_fn_method_address_is_blinded(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_address_qr_code_text(void *ptr,
                                          RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_address_qr_code_uri(void *ptr, RustBuffer pixel_per_module,
                                         RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_method_address_script_pubkey(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_method_address_to_unconfidential(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_address_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_addressresult(void *ptr,
                                        RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_addressresult(void *ptr,
                                      RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_method_addressresult_address(void *ptr,
                                           RustCallStatus *uniffi_out_err);
uint32_t
uniffi_lwk_fn_method_addressresult_index(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_amp2(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_amp2(void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_constructor_amp2_new_testnet(RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_amp2_cosign(void *ptr, void *pset,
                                       RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_amp2_descriptor_from_str(
    void *ptr, RustBuffer keyorigin_xpub, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_amp2_register(void *ptr, void *desc,
                                              RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_amp2descriptor(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_amp2descriptor(void *ptr,
                                       RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_method_amp2descriptor_descriptor(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_amp2descriptor_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_bip(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_bip(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_bip_new_bip49(RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_bip_new_bip84(RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_bip_new_bip87(RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_contract(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_contract(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_contract_new(RustBuffer domain,
                                             RustBuffer issuer_pubkey,
                                             RustBuffer name, uint8_t precision,
                                             RustBuffer ticker, uint8_t version,
                                             RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_contract_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_electrumclient(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_electrumclient(void *ptr,
                                       RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_constructor_electrumclient_new(RustBuffer electrum_url,
                                             int8_t tls, int8_t validate_domain,
                                             RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_method_electrumclient_broadcast(void *ptr, void *tx,
                                              RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_electrumclient_full_scan(void *ptr, void *wollet,
                                              RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_electrumclient_full_scan_to_index(
    void *ptr, void *wollet, uint32_t index, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_electrumclient_ping(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_esploraclient(void *ptr,
                                        RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_esploraclient(void *ptr,
                                      RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_constructor_esploraclient_new(RustBuffer url, void *network,
                                            RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_esploraclient_new_waterfalls(
    RustBuffer url, void *network, RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_method_esploraclient_broadcast(void *ptr, void *tx,
                                             RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_esploraclient_full_scan(void *ptr, void *wollet,
                                             RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_esploraclient_full_scan_to_index(
    void *ptr, void *wollet, uint32_t index, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_foreignpersister(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_foreignpersister(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_init_callback_vtable_foreignpersister(
    UniffiVTableCallbackInterfaceForeignPersister *vtable);
RustBuffer
uniffi_lwk_fn_method_foreignpersister_get(void *ptr, uint64_t index,
                                          RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_foreignpersister_push(void *ptr, void *update,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_foreignpersisterlink(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_foreignpersisterlink(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_foreignpersisterlink_new(
    void *persister, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_issuance(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_issuance(void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_issuance_asset(void *ptr,
                                               RustCallStatus *uniffi_out_err);
int8_t
uniffi_lwk_fn_method_issuance_is_issuance(void *ptr,
                                          RustCallStatus *uniffi_out_err);
int8_t
uniffi_lwk_fn_method_issuance_is_reissuance(void *ptr,
                                            RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_issuance_prev_txid(void *ptr,
                                        RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_issuance_prev_vout(void *ptr,
                                        RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_issuance_token(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_mnemonic(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_mnemonic(void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_constructor_mnemonic_from_entropy(RustBuffer b,
                                                RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_constructor_mnemonic_from_random(uint8_t word_count,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_mnemonic_new(RustBuffer s,
                                             RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_mnemonic_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_network(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_network(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_network_mainnet(RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_network_regtest(RustBuffer policy_asset,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_network_regtest_default(
    RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_network_testnet(RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_network_default_electrum_client(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_network_default_esplora_client(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_lwk_fn_method_network_is_mainnet(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_network_policy_asset(void *ptr,
                                          RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_network_tx_builder(void *ptr,
                                              RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_network_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_outpoint(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_outpoint(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_outpoint_new(RustBuffer s,
                                             RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_outpoint_txid(void *ptr,
                                         RustCallStatus *uniffi_out_err);
uint32_t uniffi_lwk_fn_method_outpoint_vout(void *ptr,
                                            RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_outpoint_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_precision(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_precision(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_precision_new(uint8_t precision,
                                              RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_precision_sats_to_string(void *ptr, int64_t sats,
                                              RustCallStatus *uniffi_out_err);
int64_t
uniffi_lwk_fn_method_precision_string_to_sats(void *ptr, RustBuffer val,
                                              RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_pset(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_pset(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_pset_new(RustBuffer base64,
                                         RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_pset_extract_tx(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_pset_finalize(void *ptr,
                                         RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_pset_inputs(void *ptr,
                                            RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_pset_uniffi_trait_display(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_psetbalance(void *ptr,
                                      RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_psetbalance(void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_psetbalance_balances(void *ptr,
                                          RustCallStatus *uniffi_out_err);
uint64_t uniffi_lwk_fn_method_psetbalance_fee(void *ptr,
                                              RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_psetbalance_recipients(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_psetdetails(void *ptr,
                                      RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_psetdetails(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_psetdetails_balance(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_psetdetails_inputs_issuances(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_psetdetails_signatures(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_psetinput(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_psetinput(void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_psetinput_issuance_asset(void *ptr,
                                              RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_psetinput_issuance_token(void *ptr,
                                              RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_psetinput_previous_script_pubkey(
    void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_method_psetinput_previous_txid(void *ptr,
                                             RustCallStatus *uniffi_out_err);
uint32_t
uniffi_lwk_fn_method_psetinput_previous_vout(void *ptr,
                                             RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_psetinput_redeem_script(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_psetsignatures(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_psetsignatures(void *ptr,
                                       RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_psetsignatures_has_signature(
    void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_psetsignatures_missing_signature(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_recipient(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_recipient(void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_recipient_address(void *ptr,
                                       RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_recipient_asset(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_recipient_value(void *ptr,
                                                RustCallStatus *uniffi_out_err);
uint32_t uniffi_lwk_fn_method_recipient_vout(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_script(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_script(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_script_new(RustBuffer hex,
                                           RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_script_asm(void *ptr,
                                           RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_script_bytes(void *ptr,
                                             RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_script_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_secretkey(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_secretkey(void *ptr, RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_constructor_secretkey_from_bytes(RustBuffer bytes,
                                               RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_secretkey_bytes(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_signer(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_signer(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_signer_new(void *mnemonic, void *network,
                                           RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_signer_random(void *network,
                                              RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_signer_keyorigin_xpub(void *ptr, void *bip,
                                           RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_signer_mnemonic(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_signer_sign(void *ptr, void *pset,
                                       RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_signer_wpkh_slip77_descriptor(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_testenv(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_testenv(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_testenv_new(RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_testenv_electrum_url(void *ptr,
                                          RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_testenv_generate(void *ptr, uint32_t blocks,
                                           RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_method_testenv_get_new_address(void *ptr,
                                             RustCallStatus *uniffi_out_err);
uint64_t uniffi_lwk_fn_method_testenv_height(void *ptr,
                                             RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_testenv_issue_asset(void *ptr, uint64_t satoshi,
                                         RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_method_testenv_send_to_address(void *ptr, void *address,
                                             uint64_t satoshi, RustBuffer asset,
                                             RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_transaction(void *ptr,
                                      RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_transaction(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_transaction_new(RustBuffer hex,
                                                RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_transaction_bytes(void *ptr,
                                       RustCallStatus *uniffi_out_err);
uint64_t uniffi_lwk_fn_method_transaction_fee(void *ptr,
                                              RustBuffer policy_asset,
                                              RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_transaction_inputs(void *ptr,
                                        RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_transaction_outputs(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_transaction_txid(void *ptr,
                                            RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_transaction_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_txbuilder(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_txbuilder(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_txbuilder_new(void *network,
                                              RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_txbuilder_add_burn(void *ptr, uint64_t satoshi,
                                             RustBuffer asset,
                                             RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_txbuilder_add_lbtc_recipient(
    void *ptr, void *address, uint64_t satoshi, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_txbuilder_add_recipient(
    void *ptr, void *address, uint64_t satoshi, RustBuffer asset,
    RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_txbuilder_drain_lbtc_to(
    void *ptr, void *address, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_txbuilder_drain_lbtc_wallet(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_txbuilder_fee_rate(void *ptr, RustBuffer rate,
                                             RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_txbuilder_finish(void *ptr, void *wollet,
                                            RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_txbuilder_issue_asset(void *ptr, uint64_t asset_sats,
                                                RustBuffer asset_receiver,
                                                uint64_t token_sats,
                                                RustBuffer token_receiver,
                                                RustBuffer contract,
                                                RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_txbuilder_reissue_asset(
    void *ptr, RustBuffer asset_to_reissue, uint64_t satoshi_to_reissue,
    RustBuffer asset_receiver, RustBuffer issuance_tx,
    RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_txbuilder_set_wallet_utxos(
    void *ptr, RustBuffer utxos, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_txbuilder_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_txin(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_txin(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_txin_outpoint(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_txout(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_txout(void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_txout_asset(void *ptr,
                                            RustCallStatus *uniffi_out_err);
int8_t uniffi_lwk_fn_method_txout_is_fee(void *ptr,
                                         RustCallStatus *uniffi_out_err);
int8_t
uniffi_lwk_fn_method_txout_is_partially_blinded(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_txout_script_pubkey(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_txout_unblind(void *ptr, void *secret_key,
                                         RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_txout_value(void *ptr,
                                            RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_txoutsecrets(void *ptr,
                                       RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_txoutsecrets(void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_txoutsecrets_asset(void *ptr,
                                        RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_txoutsecrets_asset_bf(void *ptr,
                                           RustCallStatus *uniffi_out_err);
uint64_t
uniffi_lwk_fn_method_txoutsecrets_value(void *ptr,
                                        RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_txoutsecrets_value_bf(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_txid(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_txid(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_txid_new(RustBuffer hex,
                                         RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_txid_bytes(void *ptr,
                                           RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_txid_uniffi_trait_display(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_update(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_update(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_update_new(RustBuffer bytes,
                                           RustCallStatus *uniffi_out_err);
int8_t uniffi_lwk_fn_method_update_only_tip(void *ptr,
                                            RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_update_serialize(void *ptr,
                                      RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_wallettx(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_wallettx(void *ptr, RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_wallettx_balance(void *ptr,
                                      RustCallStatus *uniffi_out_err);
uint64_t uniffi_lwk_fn_method_wallettx_fee(void *ptr,
                                           RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_wallettx_height(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_wallettx_inputs(void *ptr,
                                                RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_wallettx_outputs(void *ptr,
                                      RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_wallettx_timestamp(void *ptr,
                                        RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_wallettx_tx(void *ptr,
                                       RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_wallettx_txid(void *ptr,
                                         RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_wallettx_type_(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_wallettx_unblinded_url(void *ptr, RustBuffer explorer_url,
                                            RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_wallettxout(void *ptr,
                                      RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_wallettxout(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_wallettxout_address(void *ptr,
                                               RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_wallettxout_ext_int(void *ptr,
                                         RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_wallettxout_height(void *ptr,
                                        RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_wallettxout_outpoint(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_method_wallettxout_script_pubkey(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_method_wallettxout_unblinded(void *ptr,
                                           RustCallStatus *uniffi_out_err);
uint32_t
uniffi_lwk_fn_method_wallettxout_wildcard_index(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_wollet(void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_wollet(void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_wollet_new(void *network, void *descriptor,
                                           RustBuffer datadir,
                                           RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_constructor_wollet_with_custom_persister(
    void *network, void *descriptor, void *persister,
    RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_wollet_address(void *ptr, RustBuffer index,
                                          RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_method_wollet_apply_update(void *ptr, void *update,
                                              RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_wollet_balance(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_wollet_descriptor(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_wollet_finalize(void *ptr, void *pset,
                                           RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_wollet_pset_details(void *ptr, void *pset,
                                               RustCallStatus *uniffi_out_err);
RustBuffer
uniffi_lwk_fn_method_wollet_transactions(void *ptr,
                                         RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_wollet_txos(void *ptr,
                                            RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_wollet_utxos(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_wollet_wait_for_tx(void *ptr, void *txid,
                                              void *client,
                                              RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_clone_wolletdescriptor(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void uniffi_lwk_fn_free_wolletdescriptor(void *ptr,
                                         RustCallStatus *uniffi_out_err);
void *
uniffi_lwk_fn_constructor_wolletdescriptor_new(RustBuffer descriptor,
                                               RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_wolletdescriptor_derive_blinding_key(
    void *ptr, void *script_pubkey, RustCallStatus *uniffi_out_err);
int8_t uniffi_lwk_fn_method_wolletdescriptor_is_mainnet(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_lwk_fn_method_wolletdescriptor_script_pubkey(
    void *ptr, RustBuffer ext_int, uint32_t index,
    RustCallStatus *uniffi_out_err);
RustBuffer uniffi_lwk_fn_method_wolletdescriptor_uniffi_trait_display(
    void *ptr, RustCallStatus *uniffi_out_err);
int8_t uniffi_lwk_fn_func_is_provably_segwit(void *script_pubkey,
                                             RustBuffer redeem_script,
                                             RustCallStatus *uniffi_out_err);
RustBuffer ffi_lwk_rustbuffer_alloc(uint64_t size,
                                    RustCallStatus *uniffi_out_err);
RustBuffer ffi_lwk_rustbuffer_from_bytes(ForeignBytes bytes,
                                         RustCallStatus *uniffi_out_err);
void ffi_lwk_rustbuffer_free(RustBuffer buf, RustCallStatus *uniffi_out_err);
RustBuffer ffi_lwk_rustbuffer_reserve(RustBuffer buf, uint64_t additional,
                                      RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_u8(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_u8(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_u8(
    /*handle*/ uint64_t handle);
uint8_t ffi_lwk_rust_future_complete_u8(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_i8(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_i8(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_i8(
    /*handle*/ uint64_t handle);
int8_t ffi_lwk_rust_future_complete_i8(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_u16(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_u16(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_u16(
    /*handle*/ uint64_t handle);
uint16_t ffi_lwk_rust_future_complete_u16(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_i16(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_i16(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_i16(
    /*handle*/ uint64_t handle);
int16_t ffi_lwk_rust_future_complete_i16(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_u32(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_u32(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_u32(
    /*handle*/ uint64_t handle);
uint32_t ffi_lwk_rust_future_complete_u32(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_i32(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_i32(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_i32(
    /*handle*/ uint64_t handle);
int32_t ffi_lwk_rust_future_complete_i32(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_u64(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_u64(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_u64(
    /*handle*/ uint64_t handle);
uint64_t ffi_lwk_rust_future_complete_u64(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_i64(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_i64(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_i64(
    /*handle*/ uint64_t handle);
int64_t ffi_lwk_rust_future_complete_i64(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_f32(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_f32(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_f32(
    /*handle*/ uint64_t handle);
float ffi_lwk_rust_future_complete_f32(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_f64(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_f64(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_f64(
    /*handle*/ uint64_t handle);
double ffi_lwk_rust_future_complete_f64(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_pointer(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_pointer(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_pointer(
    /*handle*/ uint64_t handle);
void *ffi_lwk_rust_future_complete_pointer(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_rust_buffer(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_rust_buffer(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_rust_buffer(
    /*handle*/ uint64_t handle);
RustBuffer ffi_lwk_rust_future_complete_rust_buffer(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_lwk_rust_future_poll_void(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_lwk_rust_future_cancel_void(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_free_void(
    /*handle*/ uint64_t handle);
void ffi_lwk_rust_future_complete_void(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
uint16_t uniffi_lwk_checksum_func_is_provably_segwit();
uint16_t uniffi_lwk_checksum_method_address_is_blinded();
uint16_t uniffi_lwk_checksum_method_address_qr_code_text();
uint16_t uniffi_lwk_checksum_method_address_qr_code_uri();
uint16_t uniffi_lwk_checksum_method_address_script_pubkey();
uint16_t uniffi_lwk_checksum_method_address_to_unconfidential();
uint16_t uniffi_lwk_checksum_method_addressresult_address();
uint16_t uniffi_lwk_checksum_method_addressresult_index();
uint16_t uniffi_lwk_checksum_method_amp2_cosign();
uint16_t uniffi_lwk_checksum_method_amp2_descriptor_from_str();
uint16_t uniffi_lwk_checksum_method_amp2_register();
uint16_t uniffi_lwk_checksum_method_amp2descriptor_descriptor();
uint16_t uniffi_lwk_checksum_method_electrumclient_broadcast();
uint16_t uniffi_lwk_checksum_method_electrumclient_full_scan();
uint16_t uniffi_lwk_checksum_method_electrumclient_full_scan_to_index();
uint16_t uniffi_lwk_checksum_method_electrumclient_ping();
uint16_t uniffi_lwk_checksum_method_esploraclient_broadcast();
uint16_t uniffi_lwk_checksum_method_esploraclient_full_scan();
uint16_t uniffi_lwk_checksum_method_esploraclient_full_scan_to_index();
uint16_t uniffi_lwk_checksum_method_foreignpersister_get();
uint16_t uniffi_lwk_checksum_method_foreignpersister_push();
uint16_t uniffi_lwk_checksum_method_issuance_asset();
uint16_t uniffi_lwk_checksum_method_issuance_is_issuance();
uint16_t uniffi_lwk_checksum_method_issuance_is_reissuance();
uint16_t uniffi_lwk_checksum_method_issuance_prev_txid();
uint16_t uniffi_lwk_checksum_method_issuance_prev_vout();
uint16_t uniffi_lwk_checksum_method_issuance_token();
uint16_t uniffi_lwk_checksum_method_network_default_electrum_client();
uint16_t uniffi_lwk_checksum_method_network_default_esplora_client();
uint16_t uniffi_lwk_checksum_method_network_is_mainnet();
uint16_t uniffi_lwk_checksum_method_network_policy_asset();
uint16_t uniffi_lwk_checksum_method_network_tx_builder();
uint16_t uniffi_lwk_checksum_method_outpoint_txid();
uint16_t uniffi_lwk_checksum_method_outpoint_vout();
uint16_t uniffi_lwk_checksum_method_precision_sats_to_string();
uint16_t uniffi_lwk_checksum_method_precision_string_to_sats();
uint16_t uniffi_lwk_checksum_method_pset_extract_tx();
uint16_t uniffi_lwk_checksum_method_pset_finalize();
uint16_t uniffi_lwk_checksum_method_pset_inputs();
uint16_t uniffi_lwk_checksum_method_psetbalance_balances();
uint16_t uniffi_lwk_checksum_method_psetbalance_fee();
uint16_t uniffi_lwk_checksum_method_psetbalance_recipients();
uint16_t uniffi_lwk_checksum_method_psetdetails_balance();
uint16_t uniffi_lwk_checksum_method_psetdetails_inputs_issuances();
uint16_t uniffi_lwk_checksum_method_psetdetails_signatures();
uint16_t uniffi_lwk_checksum_method_psetinput_issuance_asset();
uint16_t uniffi_lwk_checksum_method_psetinput_issuance_token();
uint16_t uniffi_lwk_checksum_method_psetinput_previous_script_pubkey();
uint16_t uniffi_lwk_checksum_method_psetinput_previous_txid();
uint16_t uniffi_lwk_checksum_method_psetinput_previous_vout();
uint16_t uniffi_lwk_checksum_method_psetinput_redeem_script();
uint16_t uniffi_lwk_checksum_method_psetsignatures_has_signature();
uint16_t uniffi_lwk_checksum_method_psetsignatures_missing_signature();
uint16_t uniffi_lwk_checksum_method_recipient_address();
uint16_t uniffi_lwk_checksum_method_recipient_asset();
uint16_t uniffi_lwk_checksum_method_recipient_value();
uint16_t uniffi_lwk_checksum_method_recipient_vout();
uint16_t uniffi_lwk_checksum_method_script_asm();
uint16_t uniffi_lwk_checksum_method_script_bytes();
uint16_t uniffi_lwk_checksum_method_secretkey_bytes();
uint16_t uniffi_lwk_checksum_method_signer_keyorigin_xpub();
uint16_t uniffi_lwk_checksum_method_signer_mnemonic();
uint16_t uniffi_lwk_checksum_method_signer_sign();
uint16_t uniffi_lwk_checksum_method_signer_wpkh_slip77_descriptor();
uint16_t uniffi_lwk_checksum_method_testenv_electrum_url();
uint16_t uniffi_lwk_checksum_method_testenv_generate();
uint16_t uniffi_lwk_checksum_method_testenv_get_new_address();
uint16_t uniffi_lwk_checksum_method_testenv_height();
uint16_t uniffi_lwk_checksum_method_testenv_issue_asset();
uint16_t uniffi_lwk_checksum_method_testenv_send_to_address();
uint16_t uniffi_lwk_checksum_method_transaction_bytes();
uint16_t uniffi_lwk_checksum_method_transaction_fee();
uint16_t uniffi_lwk_checksum_method_transaction_inputs();
uint16_t uniffi_lwk_checksum_method_transaction_outputs();
uint16_t uniffi_lwk_checksum_method_transaction_txid();
uint16_t uniffi_lwk_checksum_method_txbuilder_add_burn();
uint16_t uniffi_lwk_checksum_method_txbuilder_add_lbtc_recipient();
uint16_t uniffi_lwk_checksum_method_txbuilder_add_recipient();
uint16_t uniffi_lwk_checksum_method_txbuilder_drain_lbtc_to();
uint16_t uniffi_lwk_checksum_method_txbuilder_drain_lbtc_wallet();
uint16_t uniffi_lwk_checksum_method_txbuilder_fee_rate();
uint16_t uniffi_lwk_checksum_method_txbuilder_finish();
uint16_t uniffi_lwk_checksum_method_txbuilder_issue_asset();
uint16_t uniffi_lwk_checksum_method_txbuilder_reissue_asset();
uint16_t uniffi_lwk_checksum_method_txbuilder_set_wallet_utxos();
uint16_t uniffi_lwk_checksum_method_txin_outpoint();
uint16_t uniffi_lwk_checksum_method_txout_asset();
uint16_t uniffi_lwk_checksum_method_txout_is_fee();
uint16_t uniffi_lwk_checksum_method_txout_is_partially_blinded();
uint16_t uniffi_lwk_checksum_method_txout_script_pubkey();
uint16_t uniffi_lwk_checksum_method_txout_unblind();
uint16_t uniffi_lwk_checksum_method_txout_value();
uint16_t uniffi_lwk_checksum_method_txoutsecrets_asset();
uint16_t uniffi_lwk_checksum_method_txoutsecrets_asset_bf();
uint16_t uniffi_lwk_checksum_method_txoutsecrets_value();
uint16_t uniffi_lwk_checksum_method_txoutsecrets_value_bf();
uint16_t uniffi_lwk_checksum_method_txid_bytes();
uint16_t uniffi_lwk_checksum_method_update_only_tip();
uint16_t uniffi_lwk_checksum_method_update_serialize();
uint16_t uniffi_lwk_checksum_method_wallettx_balance();
uint16_t uniffi_lwk_checksum_method_wallettx_fee();
uint16_t uniffi_lwk_checksum_method_wallettx_height();
uint16_t uniffi_lwk_checksum_method_wallettx_inputs();
uint16_t uniffi_lwk_checksum_method_wallettx_outputs();
uint16_t uniffi_lwk_checksum_method_wallettx_timestamp();
uint16_t uniffi_lwk_checksum_method_wallettx_tx();
uint16_t uniffi_lwk_checksum_method_wallettx_txid();
uint16_t uniffi_lwk_checksum_method_wallettx_type_();
uint16_t uniffi_lwk_checksum_method_wallettx_unblinded_url();
uint16_t uniffi_lwk_checksum_method_wallettxout_address();
uint16_t uniffi_lwk_checksum_method_wallettxout_ext_int();
uint16_t uniffi_lwk_checksum_method_wallettxout_height();
uint16_t uniffi_lwk_checksum_method_wallettxout_outpoint();
uint16_t uniffi_lwk_checksum_method_wallettxout_script_pubkey();
uint16_t uniffi_lwk_checksum_method_wallettxout_unblinded();
uint16_t uniffi_lwk_checksum_method_wallettxout_wildcard_index();
uint16_t uniffi_lwk_checksum_method_wollet_address();
uint16_t uniffi_lwk_checksum_method_wollet_apply_update();
uint16_t uniffi_lwk_checksum_method_wollet_balance();
uint16_t uniffi_lwk_checksum_method_wollet_descriptor();
uint16_t uniffi_lwk_checksum_method_wollet_finalize();
uint16_t uniffi_lwk_checksum_method_wollet_pset_details();
uint16_t uniffi_lwk_checksum_method_wollet_transactions();
uint16_t uniffi_lwk_checksum_method_wollet_txos();
uint16_t uniffi_lwk_checksum_method_wollet_utxos();
uint16_t uniffi_lwk_checksum_method_wollet_wait_for_tx();
uint16_t uniffi_lwk_checksum_method_wolletdescriptor_derive_blinding_key();
uint16_t uniffi_lwk_checksum_method_wolletdescriptor_is_mainnet();
uint16_t uniffi_lwk_checksum_method_wolletdescriptor_script_pubkey();
uint16_t uniffi_lwk_checksum_constructor_address_new();
uint16_t uniffi_lwk_checksum_constructor_amp2_new_testnet();
uint16_t uniffi_lwk_checksum_constructor_bip_new_bip49();
uint16_t uniffi_lwk_checksum_constructor_bip_new_bip84();
uint16_t uniffi_lwk_checksum_constructor_bip_new_bip87();
uint16_t uniffi_lwk_checksum_constructor_contract_new();
uint16_t uniffi_lwk_checksum_constructor_electrumclient_new();
uint16_t uniffi_lwk_checksum_constructor_esploraclient_new();
uint16_t uniffi_lwk_checksum_constructor_esploraclient_new_waterfalls();
uint16_t uniffi_lwk_checksum_constructor_foreignpersisterlink_new();
uint16_t uniffi_lwk_checksum_constructor_mnemonic_from_entropy();
uint16_t uniffi_lwk_checksum_constructor_mnemonic_from_random();
uint16_t uniffi_lwk_checksum_constructor_mnemonic_new();
uint16_t uniffi_lwk_checksum_constructor_network_mainnet();
uint16_t uniffi_lwk_checksum_constructor_network_regtest();
uint16_t uniffi_lwk_checksum_constructor_network_regtest_default();
uint16_t uniffi_lwk_checksum_constructor_network_testnet();
uint16_t uniffi_lwk_checksum_constructor_outpoint_new();
uint16_t uniffi_lwk_checksum_constructor_precision_new();
uint16_t uniffi_lwk_checksum_constructor_pset_new();
uint16_t uniffi_lwk_checksum_constructor_script_new();
uint16_t uniffi_lwk_checksum_constructor_secretkey_from_bytes();
uint16_t uniffi_lwk_checksum_constructor_signer_new();
uint16_t uniffi_lwk_checksum_constructor_signer_random();
uint16_t uniffi_lwk_checksum_constructor_testenv_new();
uint16_t uniffi_lwk_checksum_constructor_transaction_new();
uint16_t uniffi_lwk_checksum_constructor_txbuilder_new();
uint16_t uniffi_lwk_checksum_constructor_txid_new();
uint16_t uniffi_lwk_checksum_constructor_update_new();
uint16_t uniffi_lwk_checksum_constructor_wollet_new();
uint16_t uniffi_lwk_checksum_constructor_wollet_with_custom_persister();
uint16_t uniffi_lwk_checksum_constructor_wolletdescriptor_new();
uint32_t ffi_lwk_uniffi_contract_version();
}

// This calls into Rust.

namespace uniffi::lwk {
template <typename T> struct Bridging;

using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <typename T> struct Bridging<ReferenceHolder<T>> {
  static jsi::Value jsNew(jsi::Runtime &rt) {
    auto holder = jsi::Object(rt);
    return holder;
  }
  static T fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
                  const jsi::Value &value) {
    auto obj = value.asObject(rt);
    if (obj.hasProperty(rt, "pointee")) {
      auto pointee = obj.getProperty(rt, "pointee");
      return uniffi::lwk::Bridging<T>::fromJs(rt, callInvoker, pointee);
    }
    throw jsi::JSError(rt,
                       "Expected ReferenceHolder to have a pointee property. "
                       "This is likely a bug in uniffi-bindgen-react-native");
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<RustBuffer> {
  static RustBuffer rustbuffer_alloc(int32_t size) {
    RustCallStatus status = {UNIFFI_CALL_STATUS_OK};
    return ffi_lwk_rustbuffer_alloc(size, &status);
  }

  static void rustbuffer_free(RustBuffer buf) {
    RustCallStatus status = {UNIFFI_CALL_STATUS_OK};
    ffi_lwk_rustbuffer_free(buf, &status);
  }

  static RustBuffer rustbuffer_from_bytes(ForeignBytes bytes) {
    RustCallStatus status = {UNIFFI_CALL_STATUS_OK};
    return ffi_lwk_rustbuffer_from_bytes(bytes, &status);
  }

  static RustBuffer fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker>,
                           const jsi::Value &value) {
    try {
      auto buffer =
          uniffi_jsi::Bridging<jsi::ArrayBuffer>::value_to_arraybuffer(rt,
                                                                       value);
      auto bytes = ForeignBytes{
          .len = static_cast<int32_t>(buffer.length(rt)),
          .data = buffer.data(rt),
      };

      // This buffer is constructed from foreign bytes. Rust scaffolding copies
      // the bytes, to make the RustBuffer.
      auto buf = rustbuffer_from_bytes(bytes);
      // Once it leaves this function, the buffer is immediately passed back
      // into Rust, where it's used to deserialize into the Rust versions of the
      // arguments. At that point, the copy is destroyed.
      return buf;
    } catch (const std::logic_error &e) {
      throw jsi::JSError(rt, e.what());
    }
  }

  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker>,
                         RustBuffer buf) {
    // We need to make a copy of the bytes from Rust's memory space into
    // Javascripts memory space. We need to do this because the two languages
    // manages memory very differently: a garbage collector needs to track all
    // the memory at runtime, Rust is doing it all closer to compile time.
    uint8_t *bytes = new uint8_t[buf.len];
    std::memcpy(bytes, buf.data, buf.len);

    // Construct an ArrayBuffer with copy of the bytes from the RustBuffer.
    auto payload = std::make_shared<uniffi_jsi::CMutableBuffer>(
        uniffi_jsi::CMutableBuffer((uint8_t *)bytes, buf.len));
    auto arrayBuffer = jsi::ArrayBuffer(rt, payload);

    // Once we have a Javascript version, we no longer need the Rust version, so
    // we can call into Rust to tell it it's okay to free that memory.
    rustbuffer_free(buf);

    // Finally, return the ArrayBuffer.
    return uniffi_jsi::Bridging<jsi::ArrayBuffer>::arraybuffer_to_value(
        rt, arrayBuffer);
    ;
  }
};

} // namespace uniffi::lwk

namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<RustCallStatus> {
  static jsi::Value jsSuccess(jsi::Runtime &rt) {
    auto statusObject = jsi::Object(rt);
    statusObject.setProperty(rt, "code", jsi::Value(rt, UNIFFI_CALL_STATUS_OK));
    return statusObject;
  }
  static RustCallStatus rustSuccess(jsi::Runtime &rt) {
    return {UNIFFI_CALL_STATUS_OK};
  }
  static void copyIntoJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         const RustCallStatus status,
                         const jsi::Value &jsStatus) {
    auto statusObject = jsStatus.asObject(rt);
    if (status.error_buf.data != nullptr) {
      auto rbuf = Bridging<RustBuffer>::toJs(rt, callInvoker, status.error_buf);
      statusObject.setProperty(rt, "errorBuf", rbuf);
    }
    if (status.code != UNIFFI_CALL_STATUS_OK) {
      auto code =
          uniffi_jsi::Bridging<uint8_t>::toJs(rt, callInvoker, status.code);
      statusObject.setProperty(rt, "code", code);
    }
  }

  static RustCallStatus fromJs(jsi::Runtime &rt,
                               std::shared_ptr<CallInvoker> invoker,
                               const jsi::Value &jsStatus) {
    RustCallStatus status;
    auto statusObject = jsStatus.asObject(rt);
    if (statusObject.hasProperty(rt, "errorBuf")) {
      auto rbuf = statusObject.getProperty(rt, "errorBuf");
      status.error_buf = Bridging<RustBuffer>::fromJs(rt, invoker, rbuf);
    }
    if (statusObject.hasProperty(rt, "code")) {
      auto code = statusObject.getProperty(rt, "code");
      status.code = uniffi_jsi::Bridging<uint8_t>::fromJs(rt, invoker, code);
    }
    return status;
  }

  static void copyFromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> invoker,
                         const jsi::Value &jsStatus, RustCallStatus *status) {
    auto statusObject = jsStatus.asObject(rt);
    if (statusObject.hasProperty(rt, "errorBuf")) {
      auto rbuf = statusObject.getProperty(rt, "errorBuf");
      status->error_buf = Bridging<RustBuffer>::fromJs(rt, invoker, rbuf);
    }
    if (statusObject.hasProperty(rt, "code")) {
      auto code = statusObject.getProperty(rt, "code");
      status->code = uniffi_jsi::Bridging<uint8_t>::fromJs(rt, invoker, code);
    }
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from Rust to JS
  // RustFutureContinuationCallback

// Callback function:
// uniffi::lwk::cb::rustfuturecontinuationcallback::UniffiRustFutureContinuationCallback
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::lwk::cb::rustfuturecontinuationcallback {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, int8_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue, uint64_t rs_data,
                 int8_t rs_pollResult) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_data = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_data);
  auto js_pollResult =
      uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, rs_pollResult);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_data, js_pollResult);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiRustFutureContinuationCallback: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_data, int8_t rs_pollResult) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_data, rs_pollResult);
}

static UniffiRustFutureContinuationCallback
makeCallbackFunction( // uniffi::lwk::cb::rustfuturecontinuationcallback
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_data,
                                               int8_t rs_pollResult) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_data,
         rs_pollResult](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_data, rs_pollResult);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeLwk, which only happens
// when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::lwk::cb::rustfuturecontinuationcallback
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureFree, passed from Rust to JS as part of async callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureFree> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureFree rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureFree"), 1,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureFree func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
  // Implementation of free callback function CallbackInterfaceFree

// Callback function:
// uniffi::lwk::st::foreignfuture::foreignfuture::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::lwk::st::foreignfuture::foreignfuture::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::lwk::st::foreignfuture::foreignfuture::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeLwk, which only happens
// when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::lwk::st::foreignfuture::foreignfuture::free

// Callback function:
// uniffi::lwk::st::vtablecallbackinterfaceforeignpersister::vtablecallbackinterfaceforeignpersister::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::lwk::st::vtablecallbackinterfaceforeignpersister::
    vtablecallbackinterfaceforeignpersister::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::lwk::st::vtablecallbackinterfaceforeignpersister::vtablecallbackinterfaceforeignpersister::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeLwk, which only happens
// when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::lwk::st::vtablecallbackinterfaceforeignpersister::vtablecallbackinterfaceforeignpersister::free
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFuture> {
  static UniffiForeignFuture fromJs(jsi::Runtime &rt,
                                    std::shared_ptr<CallInvoker> callInvoker,
                                    const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFuture");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFuture rsObject;

    // Create the vtable from the js callbacks.
    rsObject.handle = uniffi_jsi::Bridging<uint64_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "handle"));
    rsObject.free = uniffi::lwk::st::foreignfuture::foreignfuture::free::
        makeCallbackFunction(rt, callInvoker, jsObject.getProperty(rt, "free"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU8> {
  static UniffiForeignFutureStructU8
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU8");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU8 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint8_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU8, passed from Rust to JS as part of async callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU8> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU8 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU8"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU8 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructU8>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI8> {
  static UniffiForeignFutureStructI8
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI8");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI8 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int8_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI8, passed from Rust to JS as part of async callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI8> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI8 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI8"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI8 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructI8>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU16> {
  static UniffiForeignFutureStructU16
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU16");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU16 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint16_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU16, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU16> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU16 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU16"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU16 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructU16>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI16> {
  static UniffiForeignFutureStructI16
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI16");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI16 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int16_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI16, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI16> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI16 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI16"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI16 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructI16>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU32> {
  static UniffiForeignFutureStructU32
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint32_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU32, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU32> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU32"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructU32>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI32> {
  static UniffiForeignFutureStructI32
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int32_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI32, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI32> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI32"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructI32>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU64> {
  static UniffiForeignFutureStructU64
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint64_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU64, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU64> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU64"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructU64>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI64> {
  static UniffiForeignFutureStructI64
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int64_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI64, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI64> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI64"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructI64>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructF32> {
  static UniffiForeignFutureStructF32
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructF32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructF32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<float>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteF32, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteF32> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteF32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteF32"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteF32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructF32>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructF64> {
  static UniffiForeignFutureStructF64
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructF64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructF64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<double>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteF64, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteF64> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteF64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteF64"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteF64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructF64>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructPointer> {
  static UniffiForeignFutureStructPointer
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for UniffiForeignFutureStructPointer");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructPointer rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<void *>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompletePointer, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompletePointer> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompletePointer rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompletePointer"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompletePointer func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructPointer>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructRustBuffer> {
  static UniffiForeignFutureStructRustBuffer
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for UniffiForeignFutureStructRustBuffer");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructRustBuffer rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi::lwk::Bridging<RustBuffer>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteRustBuffer, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteRustBuffer> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteRustBuffer rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteRustBuffer"),
        2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteRustBuffer func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructRustBuffer>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructVoid> {
  static UniffiForeignFutureStructVoid
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for UniffiForeignFutureStructVoid");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructVoid rsObject;

    // Create the vtable from the js callbacks.
    rsObject.call_status = uniffi::lwk::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::lwk
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteVoid, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::lwk {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteVoid> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteVoid rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteVoid"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteVoid func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::lwk::Bridging<UniffiForeignFutureStructVoid>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::lwk
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceForeignPersisterMethod0

// Callback function:
// uniffi::lwk::cb::callbackinterfaceforeignpersistermethod0::UniffiCallbackInterfaceForeignPersisterMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::lwk::cb::callbackinterfaceforeignpersistermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, uint64_t, RustBuffer *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, uint64_t rs_index,
                 RustBuffer *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_index =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_index);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_index);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::lwk::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn =
        uniffi::lwk::Bridging<ReferenceHolder<RustBuffer>>::fromJs(
            rt, callInvoker, uniffiResult);
  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceForeignPersisterMethod0: "
        << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, uint64_t rs_index,
                     RustBuffer *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_index, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceForeignPersisterMethod0
makeCallbackFunction( // uniffi::lwk::cb::callbackinterfaceforeignpersistermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker,
              callbackValue](uint64_t rs_uniffiHandle, uint64_t rs_index,
                             RustBuffer *rs_uniffiOutReturn,
                             RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_index,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_index,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeLwk, which only happens
// when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::lwk::cb::callbackinterfaceforeignpersistermethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceForeignPersisterMethod1

// Callback function:
// uniffi::lwk::cb::callbackinterfaceforeignpersistermethod1::UniffiCallbackInterfaceForeignPersisterMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::lwk::cb::callbackinterfaceforeignpersistermethod1 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, void *, void *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, void *rs_update,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_update =
      uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, rs_update);

  // Now we are ready to call the callback.
  // We are already on the JS thread, because this `body` function was
  // invoked from the CallInvoker.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    auto uniffiResult = cb.call(rt, js_uniffiHandle, js_update);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::lwk::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiResult, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

  } catch (const jsi::JSError &error) {
    std::cout
        << "Error in callback UniffiCallbackInterfaceForeignPersisterMethod1: "
        << error.what() << std::endl;
    throw error;
  }
}

static void callback(uint64_t rs_uniffiHandle, void *rs_update,
                     void *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_update, rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceForeignPersisterMethod1
makeCallbackFunction( // uniffi::lwk::cb::callbackinterfaceforeignpersistermethod1
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, void *rs_update,
                 void *rs_uniffiOutReturn, RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_update,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_update,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeLwk, which only happens
// when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::lwk::cb::callbackinterfaceforeignpersistermethod1
namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceForeignPersister> {
  static UniffiVTableCallbackInterfaceForeignPersister
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for "
                             "UniffiVTableCallbackInterfaceForeignPersister");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceForeignPersister rsObject;

    // Create the vtable from the js callbacks.
    rsObject.get = uniffi::lwk::cb::callbackinterfaceforeignpersistermethod0::
        makeCallbackFunction(rt, callInvoker, jsObject.getProperty(rt, "get"));
    rsObject.push = uniffi::lwk::cb::callbackinterfaceforeignpersistermethod1::
        makeCallbackFunction(rt, callInvoker, jsObject.getProperty(rt, "push"));
    rsObject.uniffi_free =
        uniffi::lwk::st::vtablecallbackinterfaceforeignpersister::
            vtablecallbackinterfaceforeignpersister::free::makeCallbackFunction(
                rt, callInvoker, jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::lwk

namespace uniffi::lwk {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiRustFutureContinuationCallback> {
  static UniffiRustFutureContinuationCallback
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &value) {
    try {
      static auto callback =
          uniffi::lwk::cb::rustfuturecontinuationcallback::makeCallbackFunction(
              rt, callInvoker, value);
      return callback;
    } catch (const std::logic_error &e) {
      throw jsi::JSError(rt, e.what());
    }
  }
};

} // namespace uniffi::lwk

NativeLwk::NativeLwk(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> invoker)
    : callInvoker(invoker), props() {
  // Map from Javascript names to the cpp names
  props["ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__string_to_byte_length(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__string_to_arraybuffer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__arraybuffer_to_string(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_address"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_address"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_address(rt, thisVal, args,
                                                         count);
          });
  props["ubrn_uniffi_lwk_fn_free_address"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_address"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_address(rt, thisVal, args,
                                                        count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_address_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_address_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_address_new(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_address_is_blinded"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_address_is_blinded"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_address_is_blinded(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_address_qr_code_text"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_address_qr_code_text"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_address_qr_code_text(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_address_qr_code_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_address_qr_code_uri"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_address_qr_code_uri(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_address_script_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_address_script_pubkey"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_address_script_pubkey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_address_to_unconfidential"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_address_to_unconfidential"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_address_to_unconfidential(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_address_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_address_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_address_uniffi_trait_display(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_addressresult"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_clone_addressresult"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_addressresult(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_lwk_fn_free_addressresult"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_free_addressresult"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_addressresult(rt, thisVal, args,
                                                              count);
          });
  props["ubrn_uniffi_lwk_fn_method_addressresult_address"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_addressresult_address"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_addressresult_address(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_addressresult_index"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_addressresult_index"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_addressresult_index(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_amp2"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_amp2"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_amp2(rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_free_amp2"] = jsi::Function::createFromHostFunction(
      rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_amp2"), 1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this->cpp_uniffi_lwk_fn_free_amp2(rt, thisVal, args, count);
      });
  props["ubrn_uniffi_lwk_fn_constructor_amp2_new_testnet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_amp2_new_testnet"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_amp2_new_testnet(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_amp2_cosign"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_amp2_cosign"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_amp2_cosign(rt, thisVal, args,
                                                              count);
          });
  props["ubrn_uniffi_lwk_fn_method_amp2_descriptor_from_str"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_amp2_descriptor_from_str"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_amp2_descriptor_from_str(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_amp2_register"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_amp2_register"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_amp2_register(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_amp2descriptor"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_clone_amp2descriptor"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_amp2descriptor(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_lwk_fn_free_amp2descriptor"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_free_amp2descriptor"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_amp2descriptor(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_amp2descriptor_descriptor"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_amp2descriptor_descriptor"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_amp2descriptor_descriptor(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_amp2descriptor_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_fn_method_amp2descriptor_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_method_amp2descriptor_uniffi_trait_display(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_bip"] = jsi::Function::createFromHostFunction(
      rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_bip"), 1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this->cpp_uniffi_lwk_fn_clone_bip(rt, thisVal, args, count);
      });
  props["ubrn_uniffi_lwk_fn_free_bip"] = jsi::Function::createFromHostFunction(
      rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_bip"), 1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this->cpp_uniffi_lwk_fn_free_bip(rt, thisVal, args, count);
      });
  props["ubrn_uniffi_lwk_fn_constructor_bip_new_bip49"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_bip_new_bip49"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_bip_new_bip49(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_bip_new_bip84"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_bip_new_bip84"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_bip_new_bip84(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_bip_new_bip87"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_bip_new_bip87"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_bip_new_bip87(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_contract"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_contract"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_contract(rt, thisVal, args,
                                                          count);
          });
  props["ubrn_uniffi_lwk_fn_free_contract"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_contract"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_contract(rt, thisVal, args,
                                                         count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_contract_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_contract_new"),
          6,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_contract_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_contract_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_contract_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_contract_uniffi_trait_display(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_electrumclient"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_clone_electrumclient"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_electrumclient(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_lwk_fn_free_electrumclient"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_free_electrumclient"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_electrumclient(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_electrumclient_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_electrumclient_new"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_electrumclient_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_electrumclient_broadcast"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_electrumclient_broadcast"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_electrumclient_broadcast(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_electrumclient_full_scan"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_electrumclient_full_scan"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_electrumclient_full_scan(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_electrumclient_full_scan_to_index"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_fn_method_electrumclient_full_scan_to_index"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_method_electrumclient_full_scan_to_index(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_electrumclient_ping"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_electrumclient_ping"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_electrumclient_ping(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_esploraclient"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_clone_esploraclient"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_esploraclient(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_lwk_fn_free_esploraclient"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_free_esploraclient"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_esploraclient(rt, thisVal, args,
                                                              count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_esploraclient_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_esploraclient_new"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_esploraclient_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_esploraclient_new_waterfalls"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_fn_constructor_esploraclient_new_waterfalls"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_constructor_esploraclient_new_waterfalls(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_esploraclient_broadcast"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_esploraclient_broadcast"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_esploraclient_broadcast(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_esploraclient_full_scan"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_esploraclient_full_scan"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_esploraclient_full_scan(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_esploraclient_full_scan_to_index"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_esploraclient_full_scan_to_index"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_method_esploraclient_full_scan_to_index(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_foreignpersister"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_clone_foreignpersister"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_foreignpersister(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_free_foreignpersister"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_free_foreignpersister"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_foreignpersister(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_foreignpersister_get"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_foreignpersister_get"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_foreignpersister_get(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_foreignpersister_push"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_foreignpersister_push"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_foreignpersister_push(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_foreignpersisterlink"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_clone_foreignpersisterlink"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_foreignpersisterlink(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_free_foreignpersisterlink"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_free_foreignpersisterlink"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_foreignpersisterlink(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_foreignpersisterlink_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_foreignpersisterlink_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_foreignpersisterlink_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_issuance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_issuance"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_issuance(rt, thisVal, args,
                                                          count);
          });
  props["ubrn_uniffi_lwk_fn_free_issuance"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_issuance"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_issuance(rt, thisVal, args,
                                                         count);
          });
  props["ubrn_uniffi_lwk_fn_method_issuance_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_issuance_asset"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_issuance_asset(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_issuance_is_issuance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_issuance_is_issuance"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_issuance_is_issuance(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_issuance_is_reissuance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_issuance_is_reissuance"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_issuance_is_reissuance(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_issuance_prev_txid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_issuance_prev_txid"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_issuance_prev_txid(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_issuance_prev_vout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_issuance_prev_vout"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_issuance_prev_vout(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_issuance_token"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_issuance_token"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_issuance_token(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_mnemonic"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_mnemonic"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_mnemonic(rt, thisVal, args,
                                                          count);
          });
  props["ubrn_uniffi_lwk_fn_free_mnemonic"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_mnemonic"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_mnemonic(rt, thisVal, args,
                                                         count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_mnemonic_from_entropy"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_mnemonic_from_entropy"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_mnemonic_from_entropy(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_mnemonic_from_random"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_mnemonic_from_random"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_mnemonic_from_random(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_mnemonic_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_mnemonic_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_mnemonic_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_mnemonic_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_mnemonic_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_mnemonic_uniffi_trait_display(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_network"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_network"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_network(rt, thisVal, args,
                                                         count);
          });
  props["ubrn_uniffi_lwk_fn_free_network"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_network"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_network(rt, thisVal, args,
                                                        count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_network_mainnet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_network_mainnet"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_network_mainnet(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_network_regtest"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_network_regtest"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_network_regtest(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_network_regtest_default"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_network_regtest_default"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_network_regtest_default(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_network_testnet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_network_testnet"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_network_testnet(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_network_default_electrum_client"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_network_default_electrum_client"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_method_network_default_electrum_client(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_network_default_esplora_client"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_network_default_esplora_client"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_method_network_default_esplora_client(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_network_is_mainnet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_network_is_mainnet"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_network_is_mainnet(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_network_policy_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_network_policy_asset"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_network_policy_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_network_tx_builder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_network_tx_builder"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_network_tx_builder(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_network_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_network_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_network_uniffi_trait_display(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_outpoint"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_outpoint"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_outpoint(rt, thisVal, args,
                                                          count);
          });
  props["ubrn_uniffi_lwk_fn_free_outpoint"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_outpoint"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_outpoint(rt, thisVal, args,
                                                         count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_outpoint_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_outpoint_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_outpoint_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_outpoint_txid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_outpoint_txid"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_outpoint_txid(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_outpoint_vout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_outpoint_vout"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_outpoint_vout(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_outpoint_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_outpoint_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_outpoint_uniffi_trait_display(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_precision"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_precision"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_precision(rt, thisVal, args,
                                                           count);
          });
  props["ubrn_uniffi_lwk_fn_free_precision"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_precision"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_precision(rt, thisVal, args,
                                                          count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_precision_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_precision_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_precision_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_precision_sats_to_string"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_precision_sats_to_string"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_precision_sats_to_string(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_precision_string_to_sats"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_precision_string_to_sats"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_precision_string_to_sats(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_pset"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_pset"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_pset(rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_free_pset"] = jsi::Function::createFromHostFunction(
      rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_pset"), 1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this->cpp_uniffi_lwk_fn_free_pset(rt, thisVal, args, count);
      });
  props["ubrn_uniffi_lwk_fn_constructor_pset_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_constructor_pset_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_pset_new(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_pset_extract_tx"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_pset_extract_tx"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_pset_extract_tx(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_pset_finalize"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_pset_finalize"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_pset_finalize(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_pset_inputs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_pset_inputs"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_pset_inputs(rt, thisVal, args,
                                                              count);
          });
  props["ubrn_uniffi_lwk_fn_method_pset_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_pset_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_pset_uniffi_trait_display(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_psetbalance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_psetbalance"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_psetbalance(rt, thisVal, args,
                                                             count);
          });
  props["ubrn_uniffi_lwk_fn_free_psetbalance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_psetbalance"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_psetbalance(rt, thisVal, args,
                                                            count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetbalance_balances"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetbalance_balances"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_psetbalance_balances(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetbalance_fee"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetbalance_fee"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_psetbalance_fee(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetbalance_recipients"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetbalance_recipients"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_psetbalance_recipients(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_psetdetails"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_psetdetails"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_psetdetails(rt, thisVal, args,
                                                             count);
          });
  props["ubrn_uniffi_lwk_fn_free_psetdetails"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_psetdetails"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_psetdetails(rt, thisVal, args,
                                                            count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetdetails_balance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetdetails_balance"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_psetdetails_balance(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetdetails_inputs_issuances"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetdetails_inputs_issuances"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_psetdetails_inputs_issuances(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetdetails_signatures"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetdetails_signatures"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_psetdetails_signatures(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_psetinput"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_psetinput"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_psetinput(rt, thisVal, args,
                                                           count);
          });
  props["ubrn_uniffi_lwk_fn_free_psetinput"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_psetinput"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_psetinput(rt, thisVal, args,
                                                          count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetinput_issuance_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetinput_issuance_asset"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_psetinput_issuance_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetinput_issuance_token"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetinput_issuance_token"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_psetinput_issuance_token(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetinput_previous_script_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetinput_previous_script_pubkey"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_method_psetinput_previous_script_pubkey(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetinput_previous_txid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetinput_previous_txid"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_psetinput_previous_txid(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetinput_previous_vout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetinput_previous_vout"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_psetinput_previous_vout(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetinput_redeem_script"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetinput_redeem_script"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_psetinput_redeem_script(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_psetsignatures"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_clone_psetsignatures"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_psetsignatures(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_lwk_fn_free_psetsignatures"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_free_psetsignatures"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_psetsignatures(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetsignatures_has_signature"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetsignatures_has_signature"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_psetsignatures_has_signature(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_psetsignatures_missing_signature"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_psetsignatures_missing_signature"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_method_psetsignatures_missing_signature(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_recipient"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_recipient"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_recipient(rt, thisVal, args,
                                                           count);
          });
  props["ubrn_uniffi_lwk_fn_free_recipient"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_recipient"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_recipient(rt, thisVal, args,
                                                          count);
          });
  props["ubrn_uniffi_lwk_fn_method_recipient_address"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_recipient_address"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_recipient_address(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_recipient_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_recipient_asset"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_recipient_asset(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_recipient_value"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_recipient_value"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_recipient_value(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_recipient_vout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_recipient_vout"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_recipient_vout(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_script"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_script"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_script(rt, thisVal, args,
                                                        count);
          });
  props["ubrn_uniffi_lwk_fn_free_script"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_script"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_script(rt, thisVal, args,
                                                       count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_script_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_script_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_script_new(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_script_asm"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_method_script_asm"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_script_asm(rt, thisVal, args,
                                                             count);
          });
  props["ubrn_uniffi_lwk_fn_method_script_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_script_bytes"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_script_bytes(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_script_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_script_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_script_uniffi_trait_display(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_secretkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_secretkey"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_secretkey(rt, thisVal, args,
                                                           count);
          });
  props["ubrn_uniffi_lwk_fn_free_secretkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_secretkey"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_secretkey(rt, thisVal, args,
                                                          count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_secretkey_from_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_secretkey_from_bytes"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_secretkey_from_bytes(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_secretkey_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_secretkey_bytes"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_secretkey_bytes(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_signer"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_signer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_signer(rt, thisVal, args,
                                                        count);
          });
  props["ubrn_uniffi_lwk_fn_free_signer"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_signer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_signer(rt, thisVal, args,
                                                       count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_signer_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_signer_new"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_signer_new(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_signer_random"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_signer_random"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_signer_random(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_signer_keyorigin_xpub"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_signer_keyorigin_xpub"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_signer_keyorigin_xpub(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_signer_mnemonic"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_signer_mnemonic"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_signer_mnemonic(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_signer_sign"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_signer_sign"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_signer_sign(rt, thisVal, args,
                                                              count);
          });
  props["ubrn_uniffi_lwk_fn_method_signer_wpkh_slip77_descriptor"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_signer_wpkh_slip77_descriptor"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_signer_wpkh_slip77_descriptor(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_testenv"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_testenv"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_testenv(rt, thisVal, args,
                                                         count);
          });
  props["ubrn_uniffi_lwk_fn_free_testenv"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_testenv"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_testenv(rt, thisVal, args,
                                                        count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_testenv_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_testenv_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_testenv_new(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_testenv_electrum_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_testenv_electrum_url"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_testenv_electrum_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_testenv_generate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_testenv_generate"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_testenv_generate(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_testenv_get_new_address"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_testenv_get_new_address"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_testenv_get_new_address(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_testenv_height"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_testenv_height"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_testenv_height(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_testenv_issue_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_testenv_issue_asset"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_testenv_issue_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_testenv_send_to_address"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_testenv_send_to_address"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_testenv_send_to_address(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_transaction"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_transaction"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_transaction(rt, thisVal, args,
                                                             count);
          });
  props["ubrn_uniffi_lwk_fn_free_transaction"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_transaction"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_transaction(rt, thisVal, args,
                                                            count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_transaction_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_transaction_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_transaction_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_transaction_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_transaction_bytes"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_transaction_bytes(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_transaction_fee"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_transaction_fee"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_transaction_fee(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_transaction_inputs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_transaction_inputs"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_transaction_inputs(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_transaction_outputs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_transaction_outputs"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_transaction_outputs(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_transaction_txid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_transaction_txid"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_transaction_txid(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_transaction_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_transaction_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_method_transaction_uniffi_trait_display(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_txbuilder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_txbuilder"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_txbuilder(rt, thisVal, args,
                                                           count);
          });
  props["ubrn_uniffi_lwk_fn_free_txbuilder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_txbuilder"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_txbuilder(rt, thisVal, args,
                                                          count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_txbuilder_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_txbuilder_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_txbuilder_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txbuilder_add_burn"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txbuilder_add_burn"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txbuilder_add_burn(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txbuilder_add_lbtc_recipient"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txbuilder_add_lbtc_recipient"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txbuilder_add_lbtc_recipient(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txbuilder_add_recipient"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txbuilder_add_recipient"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txbuilder_add_recipient(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txbuilder_drain_lbtc_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txbuilder_drain_lbtc_to"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txbuilder_drain_lbtc_to(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txbuilder_drain_lbtc_wallet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txbuilder_drain_lbtc_wallet"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txbuilder_drain_lbtc_wallet(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txbuilder_fee_rate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txbuilder_fee_rate"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txbuilder_fee_rate(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txbuilder_finish"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txbuilder_finish"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txbuilder_finish(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txbuilder_issue_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txbuilder_issue_asset"),
          6,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txbuilder_issue_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txbuilder_reissue_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txbuilder_reissue_asset"),
          5,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txbuilder_reissue_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txbuilder_set_wallet_utxos"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txbuilder_set_wallet_utxos"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txbuilder_set_wallet_utxos(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txbuilder_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txbuilder_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_method_txbuilder_uniffi_trait_display(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_txin"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_txin"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_txin(rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_free_txin"] = jsi::Function::createFromHostFunction(
      rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_txin"), 1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this->cpp_uniffi_lwk_fn_free_txin(rt, thisVal, args, count);
      });
  props["ubrn_uniffi_lwk_fn_method_txin_outpoint"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_txin_outpoint"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txin_outpoint(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_txout"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_txout"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_txout(rt, thisVal, args,
                                                       count);
          });
  props["ubrn_uniffi_lwk_fn_free_txout"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_txout"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_txout(rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txout_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_txout_asset"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txout_asset(rt, thisVal, args,
                                                              count);
          });
  props["ubrn_uniffi_lwk_fn_method_txout_is_fee"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_txout_is_fee"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txout_is_fee(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txout_is_partially_blinded"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txout_is_partially_blinded"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txout_is_partially_blinded(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txout_script_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txout_script_pubkey"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txout_script_pubkey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txout_unblind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_txout_unblind"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txout_unblind(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txout_value"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_txout_value"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txout_value(rt, thisVal, args,
                                                              count);
          });
  props["ubrn_uniffi_lwk_fn_clone_txoutsecrets"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_clone_txoutsecrets"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_txoutsecrets(rt, thisVal, args,
                                                              count);
          });
  props["ubrn_uniffi_lwk_fn_free_txoutsecrets"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_txoutsecrets"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_txoutsecrets(rt, thisVal, args,
                                                             count);
          });
  props["ubrn_uniffi_lwk_fn_method_txoutsecrets_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txoutsecrets_asset"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txoutsecrets_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txoutsecrets_asset_bf"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txoutsecrets_asset_bf"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txoutsecrets_asset_bf(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txoutsecrets_value"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txoutsecrets_value"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txoutsecrets_value(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txoutsecrets_value_bf"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txoutsecrets_value_bf"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txoutsecrets_value_bf(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_txid"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_txid"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_txid(rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_free_txid"] = jsi::Function::createFromHostFunction(
      rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_txid"), 1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this->cpp_uniffi_lwk_fn_free_txid(rt, thisVal, args, count);
      });
  props["ubrn_uniffi_lwk_fn_constructor_txid_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_constructor_txid_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_txid_new(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_txid_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_method_txid_bytes"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txid_bytes(rt, thisVal, args,
                                                             count);
          });
  props["ubrn_uniffi_lwk_fn_method_txid_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_txid_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_txid_uniffi_trait_display(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_update"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_update"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_update(rt, thisVal, args,
                                                        count);
          });
  props["ubrn_uniffi_lwk_fn_free_update"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_update"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_update(rt, thisVal, args,
                                                       count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_update_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_update_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_update_new(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_update_only_tip"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_update_only_tip"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_update_only_tip(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_update_serialize"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_update_serialize"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_update_serialize(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_wallettx"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_wallettx"), 1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_wallettx(rt, thisVal, args,
                                                          count);
          });
  props["ubrn_uniffi_lwk_fn_free_wallettx"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_wallettx"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_wallettx(rt, thisVal, args,
                                                         count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettx_balance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettx_balance"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettx_balance(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettx_fee"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_wallettx_fee"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettx_fee(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettx_height"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettx_height"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettx_height(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettx_inputs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettx_inputs"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettx_inputs(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettx_outputs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettx_outputs"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettx_outputs(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettx_timestamp"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettx_timestamp"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettx_timestamp(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettx_tx"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_wallettx_tx"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettx_tx(rt, thisVal, args,
                                                              count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettx_txid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_wallettx_txid"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettx_txid(rt, thisVal,
                                                                args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettx_type_"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_wallettx_type_"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettx_type_(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettx_unblinded_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettx_unblinded_url"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettx_unblinded_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_wallettxout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_wallettxout"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_wallettxout(rt, thisVal, args,
                                                             count);
          });
  props["ubrn_uniffi_lwk_fn_free_wallettxout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_wallettxout"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_wallettxout(rt, thisVal, args,
                                                            count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettxout_address"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettxout_address"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettxout_address(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettxout_ext_int"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettxout_ext_int"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettxout_ext_int(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettxout_height"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettxout_height"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettxout_height(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettxout_outpoint"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettxout_outpoint"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettxout_outpoint(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettxout_script_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettxout_script_pubkey"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettxout_script_pubkey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettxout_unblinded"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettxout_unblinded"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettxout_unblinded(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wallettxout_wildcard_index"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wallettxout_wildcard_index"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wallettxout_wildcard_index(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_wollet"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_clone_wollet"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_wollet(rt, thisVal, args,
                                                        count);
          });
  props["ubrn_uniffi_lwk_fn_free_wollet"] =
      jsi::Function::createFromHostFunction(
          rt, jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_fn_free_wollet"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_wollet(rt, thisVal, args,
                                                       count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_wollet_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_wollet_new"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_wollet_new(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_wollet_with_custom_persister"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_fn_constructor_wollet_with_custom_persister"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_constructor_wollet_with_custom_persister(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wollet_address"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_wollet_address"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wollet_address(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wollet_apply_update"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wollet_apply_update"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wollet_apply_update(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wollet_balance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_wollet_balance"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wollet_balance(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wollet_descriptor"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wollet_descriptor"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wollet_descriptor(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wollet_finalize"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wollet_finalize"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wollet_finalize(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wollet_pset_details"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wollet_pset_details"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wollet_pset_details(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wollet_transactions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wollet_transactions"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wollet_transactions(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wollet_txos"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_wollet_txos"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wollet_txos(rt, thisVal, args,
                                                              count);
          });
  props["ubrn_uniffi_lwk_fn_method_wollet_utxos"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_wollet_utxos"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wollet_utxos(rt, thisVal,
                                                               args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wollet_wait_for_tx"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wollet_wait_for_tx"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wollet_wait_for_tx(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_clone_wolletdescriptor"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_clone_wolletdescriptor"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_clone_wolletdescriptor(rt, thisVal,
                                                                  args, count);
          });
  props["ubrn_uniffi_lwk_fn_free_wolletdescriptor"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_free_wolletdescriptor"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_free_wolletdescriptor(rt, thisVal,
                                                                 args, count);
          });
  props["ubrn_uniffi_lwk_fn_constructor_wolletdescriptor_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_constructor_wolletdescriptor_new"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_constructor_wolletdescriptor_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wolletdescriptor_derive_blinding_key"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_fn_method_wolletdescriptor_derive_blinding_key"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_method_wolletdescriptor_derive_blinding_key(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wolletdescriptor_is_mainnet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wolletdescriptor_is_mainnet"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_method_wolletdescriptor_is_mainnet(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wolletdescriptor_script_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_method_wolletdescriptor_script_pubkey"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_method_wolletdescriptor_script_pubkey(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_method_wolletdescriptor_uniffi_trait_display"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ubrn_uniffi_lwk_fn_method_"
                                    "wolletdescriptor_uniffi_trait_display"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_method_wolletdescriptor_uniffi_trait_display(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_fn_func_is_provably_segwit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_func_is_provably_segwit"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_fn_func_is_provably_segwit(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_lwk_checksum_func_is_provably_segwit"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_func_is_provably_segwit"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_func_is_provably_segwit(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_address_is_blinded"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_address_is_blinded"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_address_is_blinded(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_address_qr_code_text"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_address_qr_code_text"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_address_qr_code_text(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_address_qr_code_uri"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_address_qr_code_uri"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_address_qr_code_uri(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_address_script_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_address_script_pubkey"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_address_script_pubkey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_address_to_unconfidential"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_address_to_unconfidential"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_address_to_unconfidential(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_addressresult_address"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_addressresult_address"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_addressresult_address(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_addressresult_index"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_addressresult_index"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_addressresult_index(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_amp2_cosign"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_amp2_cosign"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_amp2_cosign(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_amp2_descriptor_from_str"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_amp2_descriptor_from_str"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_amp2_descriptor_from_str(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_amp2_register"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_amp2_register"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_amp2_register(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_amp2descriptor_descriptor"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_amp2descriptor_descriptor"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_amp2descriptor_descriptor(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_electrumclient_broadcast"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_electrumclient_broadcast"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_electrumclient_broadcast(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_electrumclient_full_scan"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_electrumclient_full_scan"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_electrumclient_full_scan(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_electrumclient_full_scan_to_index"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_checksum_method_"
                                        "electrumclient_full_scan_to_index"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_electrumclient_full_scan_to_index(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_electrumclient_ping"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_electrumclient_ping"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_electrumclient_ping(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_esploraclient_broadcast"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_esploraclient_broadcast"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_esploraclient_broadcast(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_esploraclient_full_scan"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_esploraclient_full_scan"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_esploraclient_full_scan(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_esploraclient_full_scan_to_index"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_checksum_method_"
                                        "esploraclient_full_scan_to_index"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_esploraclient_full_scan_to_index(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_foreignpersister_get"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_foreignpersister_get"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_foreignpersister_get(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_foreignpersister_push"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_foreignpersister_push"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_foreignpersister_push(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_issuance_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_issuance_asset"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_issuance_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_issuance_is_issuance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_issuance_is_issuance"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_issuance_is_issuance(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_issuance_is_reissuance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_issuance_is_reissuance"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_issuance_is_reissuance(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_issuance_prev_txid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_issuance_prev_txid"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_issuance_prev_txid(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_issuance_prev_vout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_issuance_prev_vout"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_issuance_prev_vout(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_issuance_token"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_issuance_token"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_issuance_token(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_network_default_electrum_client"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_checksum_method_"
                                        "network_default_electrum_client"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_network_default_electrum_client(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_network_default_esplora_client"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_checksum_method_network_default_esplora_client"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_network_default_esplora_client(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_network_is_mainnet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_network_is_mainnet"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_network_is_mainnet(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_network_policy_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_network_policy_asset"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_network_policy_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_network_tx_builder"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_network_tx_builder"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_network_tx_builder(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_outpoint_txid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_outpoint_txid"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_outpoint_txid(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_outpoint_vout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_outpoint_vout"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_outpoint_vout(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_precision_sats_to_string"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_precision_sats_to_string"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_precision_sats_to_string(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_precision_string_to_sats"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_precision_string_to_sats"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_precision_string_to_sats(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_pset_extract_tx"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_pset_extract_tx"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_pset_extract_tx(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_pset_finalize"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_pset_finalize"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_pset_finalize(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_pset_inputs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_pset_inputs"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_pset_inputs(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetbalance_balances"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_psetbalance_balances"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_psetbalance_balances(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetbalance_fee"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_psetbalance_fee"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_psetbalance_fee(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetbalance_recipients"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_psetbalance_recipients"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_psetbalance_recipients(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetdetails_balance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_psetdetails_balance"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_psetdetails_balance(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetdetails_inputs_issuances"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_checksum_method_psetdetails_inputs_issuances"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_psetdetails_inputs_issuances(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetdetails_signatures"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_psetdetails_signatures"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_psetdetails_signatures(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetinput_issuance_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_psetinput_issuance_asset"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_psetinput_issuance_asset(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetinput_issuance_token"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_psetinput_issuance_token"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_psetinput_issuance_token(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetinput_previous_script_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_checksum_method_"
                                        "psetinput_previous_script_pubkey"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_psetinput_previous_script_pubkey(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetinput_previous_txid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_psetinput_previous_txid"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_psetinput_previous_txid(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetinput_previous_vout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_psetinput_previous_vout"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_psetinput_previous_vout(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetinput_redeem_script"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_psetinput_redeem_script"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_psetinput_redeem_script(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetsignatures_has_signature"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_checksum_method_psetsignatures_has_signature"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_psetsignatures_has_signature(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_psetsignatures_missing_signature"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_checksum_method_"
                                        "psetsignatures_missing_signature"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_psetsignatures_missing_signature(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_recipient_address"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_recipient_address"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_recipient_address(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_recipient_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_recipient_asset"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_recipient_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_recipient_value"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_recipient_value"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_recipient_value(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_recipient_vout"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_recipient_vout"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_recipient_vout(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_script_asm"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_script_asm"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_script_asm(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_script_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_script_bytes"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_script_bytes(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_secretkey_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_secretkey_bytes"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_secretkey_bytes(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_signer_keyorigin_xpub"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_signer_keyorigin_xpub"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_signer_keyorigin_xpub(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_signer_mnemonic"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_signer_mnemonic"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_signer_mnemonic(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_signer_sign"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_signer_sign"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_signer_sign(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_signer_wpkh_slip77_descriptor"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_checksum_method_signer_wpkh_slip77_descriptor"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_signer_wpkh_slip77_descriptor(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_testenv_electrum_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_testenv_electrum_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_testenv_electrum_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_testenv_generate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_testenv_generate"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_testenv_generate(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_testenv_get_new_address"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_testenv_get_new_address"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_testenv_get_new_address(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_testenv_height"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_testenv_height"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_testenv_height(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_testenv_issue_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_testenv_issue_asset"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_testenv_issue_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_testenv_send_to_address"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_testenv_send_to_address"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_testenv_send_to_address(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_transaction_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_transaction_bytes"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_transaction_bytes(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_transaction_fee"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_transaction_fee"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_transaction_fee(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_transaction_inputs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_transaction_inputs"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_transaction_inputs(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_transaction_outputs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_transaction_outputs"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_transaction_outputs(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_transaction_txid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_transaction_txid"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_transaction_txid(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txbuilder_add_burn"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txbuilder_add_burn"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txbuilder_add_burn(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txbuilder_add_lbtc_recipient"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_checksum_method_txbuilder_add_lbtc_recipient"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_txbuilder_add_lbtc_recipient(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txbuilder_add_recipient"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txbuilder_add_recipient"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txbuilder_add_recipient(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txbuilder_drain_lbtc_to"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txbuilder_drain_lbtc_to"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txbuilder_drain_lbtc_to(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txbuilder_drain_lbtc_wallet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_checksum_method_txbuilder_drain_lbtc_wallet"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_txbuilder_drain_lbtc_wallet(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txbuilder_fee_rate"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txbuilder_fee_rate"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txbuilder_fee_rate(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txbuilder_finish"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txbuilder_finish"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txbuilder_finish(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txbuilder_issue_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txbuilder_issue_asset"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txbuilder_issue_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txbuilder_reissue_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txbuilder_reissue_asset"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txbuilder_reissue_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txbuilder_set_wallet_utxos"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txbuilder_set_wallet_utxos"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_txbuilder_set_wallet_utxos(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txin_outpoint"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txin_outpoint"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txin_outpoint(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txout_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txout_asset"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txout_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txout_is_fee"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txout_is_fee"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txout_is_fee(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txout_is_partially_blinded"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txout_is_partially_blinded"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_txout_is_partially_blinded(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txout_script_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txout_script_pubkey"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txout_script_pubkey(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txout_unblind"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txout_unblind"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txout_unblind(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txout_value"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txout_value"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txout_value(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txoutsecrets_asset"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txoutsecrets_asset"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txoutsecrets_asset(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txoutsecrets_asset_bf"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txoutsecrets_asset_bf"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txoutsecrets_asset_bf(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txoutsecrets_value"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txoutsecrets_value"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txoutsecrets_value(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txoutsecrets_value_bf"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txoutsecrets_value_bf"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txoutsecrets_value_bf(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_txid_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_txid_bytes"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_txid_bytes(rt, thisVal,
                                                                   args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_update_only_tip"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_update_only_tip"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_update_only_tip(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_update_serialize"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_update_serialize"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_update_serialize(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettx_balance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettx_balance"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettx_balance(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettx_fee"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettx_fee"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettx_fee(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettx_height"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettx_height"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettx_height(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettx_inputs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettx_inputs"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettx_inputs(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettx_outputs"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettx_outputs"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettx_outputs(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettx_timestamp"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettx_timestamp"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettx_timestamp(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettx_tx"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettx_tx"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettx_tx(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettx_txid"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettx_txid"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettx_txid(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettx_type_"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettx_type_"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettx_type_(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettx_unblinded_url"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettx_unblinded_url"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettx_unblinded_url(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettxout_address"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettxout_address"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettxout_address(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettxout_ext_int"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettxout_ext_int"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettxout_ext_int(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettxout_height"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettxout_height"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettxout_height(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettxout_outpoint"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettxout_outpoint"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettxout_outpoint(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettxout_script_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettxout_script_pubkey"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_wallettxout_script_pubkey(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettxout_unblinded"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettxout_unblinded"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wallettxout_unblinded(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wallettxout_wildcard_index"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wallettxout_wildcard_index"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_wallettxout_wildcard_index(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wollet_address"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wollet_address"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wollet_address(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wollet_apply_update"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wollet_apply_update"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wollet_apply_update(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wollet_balance"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wollet_balance"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wollet_balance(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wollet_descriptor"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wollet_descriptor"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wollet_descriptor(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wollet_finalize"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wollet_finalize"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wollet_finalize(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wollet_pset_details"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wollet_pset_details"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wollet_pset_details(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wollet_transactions"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wollet_transactions"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wollet_transactions(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wollet_txos"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wollet_txos"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wollet_txos(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wollet_utxos"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wollet_utxos"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wollet_utxos(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wollet_wait_for_tx"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_method_wollet_wait_for_tx"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_method_wollet_wait_for_tx(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wolletdescriptor_derive_blinding_"
        "key"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_checksum_method_"
                                    "wolletdescriptor_derive_blinding_key"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_lwk_checksum_method_wolletdescriptor_derive_blinding_key(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_lwk_checksum_method_wolletdescriptor_is_mainnet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_checksum_method_wolletdescriptor_is_mainnet"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_wolletdescriptor_is_mainnet(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_method_wolletdescriptor_script_pubkey"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_checksum_method_wolletdescriptor_script_pubkey"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_method_wolletdescriptor_script_pubkey(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_address_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_address_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_address_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_amp2_new_testnet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_amp2_new_testnet"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_amp2_new_testnet(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_bip_new_bip49"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_bip_new_bip49"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_bip_new_bip49(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_bip_new_bip84"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_bip_new_bip84"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_bip_new_bip84(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_bip_new_bip87"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_bip_new_bip87"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_bip_new_bip87(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_contract_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_contract_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_contract_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_electrumclient_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_electrumclient_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_electrumclient_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_esploraclient_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_esploraclient_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_esploraclient_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_esploraclient_new_waterfalls"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_checksum_constructor_"
                                        "esploraclient_new_waterfalls"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_constructor_esploraclient_new_waterfalls(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_foreignpersisterlink_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_checksum_constructor_foreignpersisterlink_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_constructor_foreignpersisterlink_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_mnemonic_from_entropy"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_mnemonic_from_entropy"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_constructor_mnemonic_from_entropy(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_mnemonic_from_random"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_mnemonic_from_random"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_constructor_mnemonic_from_random(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_mnemonic_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_mnemonic_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_mnemonic_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_network_mainnet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_network_mainnet"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_network_mainnet(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_network_regtest"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_network_regtest"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_network_regtest(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_network_regtest_default"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_lwk_checksum_constructor_network_regtest_default"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_constructor_network_regtest_default(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_network_testnet"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_network_testnet"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_network_testnet(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_outpoint_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_outpoint_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_outpoint_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_precision_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_precision_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_precision_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_pset_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_pset_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_pset_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_script_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_script_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_script_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_secretkey_from_bytes"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_secretkey_from_bytes"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_constructor_secretkey_from_bytes(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_signer_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_signer_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_signer_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_signer_random"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_signer_random"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_signer_random(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_testenv_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_testenv_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_testenv_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_transaction_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_transaction_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_transaction_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_txbuilder_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_txbuilder_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_txbuilder_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_txid_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_txid_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_txid_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_update_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_update_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_update_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_wollet_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_wollet_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_lwk_checksum_constructor_wollet_new(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_wollet_with_custom_persister"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_lwk_checksum_constructor_"
                                        "wollet_with_custom_persister"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_constructor_wollet_with_custom_persister(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_lwk_checksum_constructor_wolletdescriptor_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_checksum_constructor_wolletdescriptor_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_checksum_constructor_wolletdescriptor_new(
                    rt, thisVal, args, count);
          });
  props["ubrn_ffi_lwk_uniffi_contract_version"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_ffi_lwk_uniffi_contract_version"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_lwk_uniffi_contract_version(rt, thisVal, args,
                                                             count);
          });
  props["ubrn_uniffi_lwk_fn_init_callback_vtable_foreignpersister"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_lwk_fn_init_callback_vtable_foreignpersister"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_lwk_fn_init_callback_vtable_foreignpersister(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_address_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_address_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_address_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_addressresult_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "addressresult_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_addressresult_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_amp2_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_amp2_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_amp2_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_amp2descriptor_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "amp2descriptor_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_amp2descriptor_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_bip_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_bip_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_bip_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_contract_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_contract_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_contract_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_electrumclient_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "electrumclient_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_electrumclient_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_esploraclient_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "esploraclient_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_esploraclient_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_foreignpersister_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "foreignpersister_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_foreignpersister_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_foreignpersisterlink_ffi__bless_"
        "pointer"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                    "foreignpersisterlink_ffi__bless_pointer"),
      1,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_internal_fn_method_foreignpersisterlink_ffi__bless_pointer(
                rt, thisVal, args, count);
      });
  props["ubrn_uniffi_internal_fn_method_issuance_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_issuance_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_issuance_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_mnemonic_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_mnemonic_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_mnemonic_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_network_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_network_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_network_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_outpoint_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_outpoint_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_outpoint_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_precision_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_precision_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_precision_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_pset_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_pset_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_pset_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_psetbalance_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_psetbalance_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_psetbalance_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_psetdetails_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_psetdetails_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_psetdetails_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_psetinput_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_psetinput_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_psetinput_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_psetsignatures_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "psetsignatures_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_psetsignatures_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_recipient_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_recipient_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_recipient_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_script_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_script_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_script_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_secretkey_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_secretkey_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_secretkey_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_signer_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_signer_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_signer_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_testenv_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_testenv_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_testenv_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_transaction_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_transaction_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_transaction_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_txbuilder_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_txbuilder_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_txbuilder_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_txin_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_txin_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_txin_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_txout_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_txout_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_txout_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_txoutsecrets_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_txoutsecrets_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_txoutsecrets_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_txid_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_txid_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_method_txid_ffi__bless_pointer(
                rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_update_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_update_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_update_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_wallettx_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_wallettx_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_wallettx_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_wallettxout_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "ubrn_uniffi_internal_fn_method_wallettxout_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_wallettxout_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_wollet_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "ubrn_uniffi_internal_fn_method_wollet_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_wollet_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["ubrn_uniffi_internal_fn_method_wolletdescriptor_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_method_"
                                        "wolletdescriptor_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_wolletdescriptor_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
}

void NativeLwk::registerModule(
    jsi::Runtime &rt, std::shared_ptr<react::CallInvoker> callInvoker) {
  auto invoker =
      std::make_shared<uniffi_runtime::UniffiCallInvoker>(callInvoker);
  auto tm = std::make_shared<NativeLwk>(rt, invoker);
  auto obj = rt.global().createFromHostObject(rt, tm);
  rt.global().setProperty(rt, "NativeLwk", obj);
}

void NativeLwk::unregisterModule(jsi::Runtime &rt) {
  // NOOP
}

jsi::Value NativeLwk::get(jsi::Runtime &rt, const jsi::PropNameID &name) {
  try {
    return jsi::Value(rt, props.at(name.utf8(rt)));
  } catch (std::out_of_range &e) {
    return jsi::Value::undefined();
  }
}

std::vector<jsi::PropNameID> NativeLwk::getPropertyNames(jsi::Runtime &rt) {
  std::vector<jsi::PropNameID> rval;
  for (auto &[key, value] : props) {
    rval.push_back(jsi::PropNameID::forUtf8(rt, key));
  }
  return rval;
}

void NativeLwk::set(jsi::Runtime &rt, const jsi::PropNameID &name,
                    const jsi::Value &value) {
  props.insert_or_assign(name.utf8(rt), &value);
}

NativeLwk::~NativeLwk() {
  // Cleanup for callback function RustFutureContinuationCallback
  uniffi::lwk::cb::rustfuturecontinuationcallback::cleanup();
  // Cleanup for "free" callback function CallbackInterfaceFree
  uniffi::lwk::st::foreignfuture::foreignfuture::free::cleanup();
  uniffi::lwk::st::vtablecallbackinterfaceforeignpersister::
      vtablecallbackinterfaceforeignpersister::free::cleanup();
  // Cleanup for callback function CallbackInterfaceForeignPersisterMethod0
  uniffi::lwk::cb::callbackinterfaceforeignpersistermethod0::cleanup();
  // Cleanup for callback function CallbackInterfaceForeignPersisterMethod1
  uniffi::lwk::cb::callbackinterfaceforeignpersistermethod1::cleanup();
}

// Utility functions for serialization/deserialization of strings.
jsi::Value NativeLwk::cpp_uniffi_internal_fn_func_ffi__string_to_byte_length(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  return uniffi_jsi::Bridging<std::string>::string_to_bytelength(rt, args[0]);
}

jsi::Value NativeLwk::cpp_uniffi_internal_fn_func_ffi__string_to_arraybuffer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  return uniffi_jsi::Bridging<std::string>::string_to_arraybuffer(rt, args[0]);
}

jsi::Value NativeLwk::cpp_uniffi_internal_fn_func_ffi__arraybuffer_to_string(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  return uniffi_jsi::Bridging<std::string>::arraybuffer_to_string(rt, args[0]);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_address_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_address(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_addressresult_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_addressresult(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_amp2_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_amp2(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_amp2descriptor_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_amp2descriptor(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_bip_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_bip(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_contract_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_contract(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_electrumclient_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_electrumclient(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_esploraclient_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_esploraclient(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_foreignpersister_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_foreignpersister(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::
    cpp_uniffi_internal_fn_method_foreignpersisterlink_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_foreignpersisterlink(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_issuance_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_issuance(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_mnemonic_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_mnemonic(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_network_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_network(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_outpoint_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_outpoint(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_precision_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_precision(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_pset_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_pset(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_psetbalance_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_psetbalance(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_psetdetails_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_psetdetails(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_psetinput_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_psetinput(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_psetsignatures_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_psetsignatures(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_recipient_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_recipient(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_script_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_script(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_secretkey_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_secretkey(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_signer_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_signer(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_testenv_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_testenv(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_transaction_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_transaction(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_txbuilder_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_txbuilder(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_txin_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_txin(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_txout_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_txout(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_txoutsecrets_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_txoutsecrets(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_txid_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_txid(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_update_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_update(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_wallettx_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_wallettx(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_wallettxout_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_wallettxout(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeLwk::cpp_uniffi_internal_fn_method_wollet_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_wollet(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeLwk::cpp_uniffi_internal_fn_method_wolletdescriptor_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_lwk_fn_free_wolletdescriptor(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}

// Methods calling directly into the uniffi generated C API of the Rust crate.
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_address(jsi::Runtime &rt,
                                                      const jsi::Value &thisVal,
                                                      const jsi::Value *args,
                                                      size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_address(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_address(jsi::Runtime &rt,
                                                     const jsi::Value &thisVal,
                                                     const jsi::Value *args,
                                                     size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_address(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_address_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_address_new(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_address_is_blinded(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_address_is_blinded(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_address_qr_code_text(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_address_qr_code_text(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_address_qr_code_uri(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_address_qr_code_uri(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_address_script_pubkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_address_script_pubkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_address_to_unconfidential(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_address_to_unconfidential(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_address_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_address_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_addressresult(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_addressresult(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_addressresult(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_addressresult(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_addressresult_address(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_addressresult_address(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_addressresult_index(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_addressresult_index(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_amp2(jsi::Runtime &rt,
                                                   const jsi::Value &thisVal,
                                                   const jsi::Value *args,
                                                   size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_amp2(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_amp2(jsi::Runtime &rt,
                                                  const jsi::Value &thisVal,
                                                  const jsi::Value *args,
                                                  size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_amp2(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_amp2_new_testnet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_amp2_new_testnet(&status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_amp2_cosign(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_amp2_cosign(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_amp2_descriptor_from_str(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_amp2_descriptor_from_str(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_amp2_register(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_amp2_register(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_amp2descriptor(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_amp2descriptor(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_amp2descriptor(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_amp2descriptor(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_amp2descriptor_descriptor(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_amp2descriptor_descriptor(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_fn_method_amp2descriptor_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_amp2descriptor_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_bip(jsi::Runtime &rt,
                                                  const jsi::Value &thisVal,
                                                  const jsi::Value *args,
                                                  size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_bip(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_bip(jsi::Runtime &rt,
                                                 const jsi::Value &thisVal,
                                                 const jsi::Value *args,
                                                 size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_bip(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_bip_new_bip49(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_bip_new_bip49(&status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_bip_new_bip84(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_bip_new_bip84(&status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_bip_new_bip87(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_bip_new_bip87(&status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_contract(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_contract(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_contract(jsi::Runtime &rt,
                                                      const jsi::Value &thisVal,
                                                      const jsi::Value *args,
                                                      size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_contract(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_contract_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_contract_new(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<uint8_t>::fromJs(rt, callInvoker, args[3]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[4]),
      uniffi_jsi::Bridging<uint8_t>::fromJs(rt, callInvoker, args[5]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_contract_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_contract_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_electrumclient(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_electrumclient(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_electrumclient(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_electrumclient(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_electrumclient_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_electrumclient_new(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<int8_t>::fromJs(rt, callInvoker, args[2]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_electrumclient_broadcast(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_electrumclient_broadcast(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_electrumclient_full_scan(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_electrumclient_full_scan(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_fn_method_electrumclient_full_scan_to_index(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_electrumclient_full_scan_to_index(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_electrumclient_ping(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_electrumclient_ping(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_esploraclient(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_esploraclient(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_esploraclient(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_esploraclient(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_esploraclient_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_esploraclient_new(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_fn_constructor_esploraclient_new_waterfalls(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_esploraclient_new_waterfalls(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_esploraclient_broadcast(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_esploraclient_broadcast(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_esploraclient_full_scan(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_esploraclient_full_scan(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_esploraclient_full_scan_to_index(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_esploraclient_full_scan_to_index(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_foreignpersister(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_foreignpersister(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_foreignpersister(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_foreignpersister(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_foreignpersister_get(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_foreignpersister_get(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_foreignpersister_push(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_foreignpersister_push(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_foreignpersisterlink(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_foreignpersisterlink(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_foreignpersisterlink(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_foreignpersisterlink(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_foreignpersisterlink_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_foreignpersisterlink_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_issuance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_issuance(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_issuance(jsi::Runtime &rt,
                                                      const jsi::Value &thisVal,
                                                      const jsi::Value *args,
                                                      size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_issuance(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_issuance_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_issuance_asset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_issuance_is_issuance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_issuance_is_issuance(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_issuance_is_reissuance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_issuance_is_reissuance(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_issuance_prev_txid(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_issuance_prev_txid(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_issuance_prev_vout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_issuance_prev_vout(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_issuance_token(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_issuance_token(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_mnemonic(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_mnemonic(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_mnemonic(jsi::Runtime &rt,
                                                      const jsi::Value &thisVal,
                                                      const jsi::Value *args,
                                                      size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_mnemonic(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_mnemonic_from_entropy(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_mnemonic_from_entropy(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_mnemonic_from_random(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_mnemonic_from_random(
      uniffi_jsi::Bridging<uint8_t>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_mnemonic_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_mnemonic_new(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_mnemonic_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_mnemonic_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_network(jsi::Runtime &rt,
                                                      const jsi::Value &thisVal,
                                                      const jsi::Value *args,
                                                      size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_network(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_network(jsi::Runtime &rt,
                                                     const jsi::Value &thisVal,
                                                     const jsi::Value *args,
                                                     size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_network(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_network_mainnet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_network_mainnet(&status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_network_regtest(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_network_regtest(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_network_regtest_default(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_network_regtest_default(&status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_network_testnet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_network_testnet(&status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_network_default_electrum_client(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_network_default_electrum_client(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_network_default_esplora_client(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_network_default_esplora_client(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_network_is_mainnet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_network_is_mainnet(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_network_policy_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_network_policy_asset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_network_tx_builder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_network_tx_builder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_network_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_network_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_outpoint(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_outpoint(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_outpoint(jsi::Runtime &rt,
                                                      const jsi::Value &thisVal,
                                                      const jsi::Value *args,
                                                      size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_outpoint(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_outpoint_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_outpoint_new(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_outpoint_txid(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_outpoint_txid(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_outpoint_vout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_outpoint_vout(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_outpoint_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_outpoint_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_precision(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_precision(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_precision(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_precision(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_precision_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_precision_new(
      uniffi_jsi::Bridging<uint8_t>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_precision_sats_to_string(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_precision_sats_to_string(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<int64_t>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_precision_string_to_sats(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_precision_string_to_sats(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<int64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_pset(jsi::Runtime &rt,
                                                   const jsi::Value &thisVal,
                                                   const jsi::Value *args,
                                                   size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_pset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_pset(jsi::Runtime &rt,
                                                  const jsi::Value &thisVal,
                                                  const jsi::Value *args,
                                                  size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_pset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_pset_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_pset_new(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_pset_extract_tx(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_pset_extract_tx(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_pset_finalize(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_pset_finalize(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_pset_inputs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_pset_inputs(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_pset_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_pset_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_psetbalance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_psetbalance(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_psetbalance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_psetbalance(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetbalance_balances(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetbalance_balances(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetbalance_fee(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetbalance_fee(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetbalance_recipients(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetbalance_recipients(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_psetdetails(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_psetdetails(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_psetdetails(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_psetdetails(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetdetails_balance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetdetails_balance(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetdetails_inputs_issuances(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetdetails_inputs_issuances(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetdetails_signatures(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetdetails_signatures(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_psetinput(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_psetinput(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_psetinput(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_psetinput(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetinput_issuance_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetinput_issuance_asset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetinput_issuance_token(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetinput_issuance_token(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetinput_previous_script_pubkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetinput_previous_script_pubkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetinput_previous_txid(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetinput_previous_txid(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetinput_previous_vout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetinput_previous_vout(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetinput_redeem_script(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetinput_redeem_script(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_psetsignatures(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_psetsignatures(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_psetsignatures(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_psetsignatures(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetsignatures_has_signature(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetsignatures_has_signature(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_psetsignatures_missing_signature(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_psetsignatures_missing_signature(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_recipient(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_recipient(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_recipient(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_recipient(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_recipient_address(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_recipient_address(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_recipient_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_recipient_asset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_recipient_value(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_recipient_value(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_recipient_vout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_recipient_vout(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_script(jsi::Runtime &rt,
                                                     const jsi::Value &thisVal,
                                                     const jsi::Value *args,
                                                     size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_script(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_script(jsi::Runtime &rt,
                                                    const jsi::Value &thisVal,
                                                    const jsi::Value *args,
                                                    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_script(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_script_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_script_new(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_script_asm(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_script_asm(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_script_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_script_bytes(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_script_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_script_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_secretkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_secretkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_secretkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_secretkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_secretkey_from_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_secretkey_from_bytes(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_secretkey_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_secretkey_bytes(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_signer(jsi::Runtime &rt,
                                                     const jsi::Value &thisVal,
                                                     const jsi::Value *args,
                                                     size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_signer(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_signer(jsi::Runtime &rt,
                                                    const jsi::Value &thisVal,
                                                    const jsi::Value *args,
                                                    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_signer(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_signer_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_signer_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_signer_random(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_signer_random(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_signer_keyorigin_xpub(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_signer_keyorigin_xpub(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_signer_mnemonic(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_signer_mnemonic(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_signer_sign(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_signer_sign(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_signer_wpkh_slip77_descriptor(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_signer_wpkh_slip77_descriptor(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_testenv(jsi::Runtime &rt,
                                                      const jsi::Value &thisVal,
                                                      const jsi::Value *args,
                                                      size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_testenv(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_testenv(jsi::Runtime &rt,
                                                     const jsi::Value &thisVal,
                                                     const jsi::Value *args,
                                                     size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_testenv(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_testenv_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_testenv_new(&status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_testenv_electrum_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_testenv_electrum_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_testenv_generate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_testenv_generate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_testenv_get_new_address(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_testenv_get_new_address(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_testenv_height(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_testenv_height(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_testenv_issue_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_testenv_issue_asset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_testenv_send_to_address(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_testenv_send_to_address(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[2]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_transaction(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_transaction(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_transaction(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_transaction(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_transaction_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_transaction_new(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_transaction_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_transaction_bytes(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_transaction_fee(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_transaction_fee(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_transaction_inputs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_transaction_inputs(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_transaction_outputs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_transaction_outputs(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_transaction_txid(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_transaction_txid(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_transaction_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_transaction_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_txbuilder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_txbuilder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_txbuilder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_txbuilder(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_txbuilder_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_txbuilder_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txbuilder_add_burn(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_txbuilder_add_burn(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txbuilder_add_lbtc_recipient(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_txbuilder_add_lbtc_recipient(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txbuilder_add_recipient(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_txbuilder_add_recipient(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[2]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txbuilder_drain_lbtc_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_txbuilder_drain_lbtc_to(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txbuilder_drain_lbtc_wallet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_txbuilder_drain_lbtc_wallet(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txbuilder_fee_rate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_txbuilder_fee_rate(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txbuilder_finish(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txbuilder_finish(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txbuilder_issue_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_txbuilder_issue_asset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[3]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[4]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[5]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txbuilder_reissue_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_txbuilder_reissue_asset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[2]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[4]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txbuilder_set_wallet_utxos(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_txbuilder_set_wallet_utxos(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txbuilder_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txbuilder_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_txin(jsi::Runtime &rt,
                                                   const jsi::Value &thisVal,
                                                   const jsi::Value *args,
                                                   size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_txin(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_txin(jsi::Runtime &rt,
                                                  const jsi::Value &thisVal,
                                                  const jsi::Value *args,
                                                  size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_txin(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txin_outpoint(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txin_outpoint(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_txout(jsi::Runtime &rt,
                                                    const jsi::Value &thisVal,
                                                    const jsi::Value *args,
                                                    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_txout(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_txout(jsi::Runtime &rt,
                                                   const jsi::Value &thisVal,
                                                   const jsi::Value *args,
                                                   size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_txout(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txout_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txout_asset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txout_is_fee(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txout_is_fee(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txout_is_partially_blinded(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txout_is_partially_blinded(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txout_script_pubkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txout_script_pubkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txout_unblind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txout_unblind(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txout_value(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txout_value(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_txoutsecrets(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_txoutsecrets(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_txoutsecrets(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_txoutsecrets(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txoutsecrets_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txoutsecrets_asset(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txoutsecrets_asset_bf(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txoutsecrets_asset_bf(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txoutsecrets_value(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txoutsecrets_value(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txoutsecrets_value_bf(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txoutsecrets_value_bf(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_txid(jsi::Runtime &rt,
                                                   const jsi::Value &thisVal,
                                                   const jsi::Value *args,
                                                   size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_txid(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_txid(jsi::Runtime &rt,
                                                  const jsi::Value &thisVal,
                                                  const jsi::Value *args,
                                                  size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_txid(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_txid_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_txid_new(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txid_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txid_bytes(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_txid_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_txid_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_update(jsi::Runtime &rt,
                                                     const jsi::Value &thisVal,
                                                     const jsi::Value *args,
                                                     size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_update(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_update(jsi::Runtime &rt,
                                                    const jsi::Value &thisVal,
                                                    const jsi::Value *args,
                                                    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_update(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_update_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_update_new(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_update_only_tip(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_update_only_tip(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_update_serialize(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_update_serialize(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_wallettx(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_wallettx(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_wallettx(jsi::Runtime &rt,
                                                      const jsi::Value &thisVal,
                                                      const jsi::Value *args,
                                                      size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_wallettx(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettx_balance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettx_balance(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettx_fee(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettx_fee(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettx_height(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettx_height(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettx_inputs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettx_inputs(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettx_outputs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettx_outputs(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettx_timestamp(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettx_timestamp(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettx_tx(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettx_tx(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettx_txid(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettx_txid(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettx_type_(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettx_type_(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettx_unblinded_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettx_unblinded_url(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_wallettxout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_wallettxout(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_wallettxout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_wallettxout(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettxout_address(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettxout_address(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettxout_ext_int(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettxout_ext_int(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettxout_height(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettxout_height(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettxout_outpoint(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettxout_outpoint(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettxout_script_pubkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettxout_script_pubkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettxout_unblinded(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettxout_unblinded(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wallettxout_wildcard_index(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wallettxout_wildcard_index(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_wollet(jsi::Runtime &rt,
                                                     const jsi::Value &thisVal,
                                                     const jsi::Value *args,
                                                     size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_wollet(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_wollet(jsi::Runtime &rt,
                                                    const jsi::Value &thisVal,
                                                    const jsi::Value *args,
                                                    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_wollet(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_wollet_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_wollet_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_fn_constructor_wollet_with_custom_persister(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_wollet_with_custom_persister(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wollet_address(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wollet_address(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wollet_apply_update(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_method_wollet_apply_update(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wollet_balance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wollet_balance(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wollet_descriptor(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wollet_descriptor(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wollet_finalize(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wollet_finalize(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wollet_pset_details(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wollet_pset_details(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wollet_transactions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wollet_transactions(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wollet_txos(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wollet_txos(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wollet_utxos(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wollet_utxos(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wollet_wait_for_tx(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wollet_wait_for_tx(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[2]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_clone_wolletdescriptor(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_clone_wolletdescriptor(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_free_wolletdescriptor(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_lwk_fn_free_wolletdescriptor(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_constructor_wolletdescriptor_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_constructor_wolletdescriptor_new(
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_fn_method_wolletdescriptor_derive_blinding_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wolletdescriptor_derive_blinding_key(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wolletdescriptor_is_mainnet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wolletdescriptor_is_mainnet(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_method_wolletdescriptor_script_pubkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wolletdescriptor_script_pubkey(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_fn_method_wolletdescriptor_uniffi_trait_display(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_method_wolletdescriptor_uniffi_trait_display(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi::lwk::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_func_is_provably_segwit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::lwk::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_lwk_fn_func_is_provably_segwit(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::lwk::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::lwk::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status,
                                                    args[count - 1]);

  return uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_func_is_provably_segwit(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_func_is_provably_segwit();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_address_is_blinded(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_address_is_blinded();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_address_qr_code_text(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_address_qr_code_text();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_address_qr_code_uri(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_address_qr_code_uri();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_address_script_pubkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_address_script_pubkey();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_address_to_unconfidential(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_address_to_unconfidential();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_addressresult_address(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_addressresult_address();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_addressresult_index(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_addressresult_index();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_amp2_cosign(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_amp2_cosign();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_amp2_descriptor_from_str(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_amp2_descriptor_from_str();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_amp2_register(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_amp2_register();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_amp2descriptor_descriptor(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_amp2descriptor_descriptor();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_electrumclient_broadcast(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_electrumclient_broadcast();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_electrumclient_full_scan(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_electrumclient_full_scan();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_electrumclient_full_scan_to_index(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_electrumclient_full_scan_to_index();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_electrumclient_ping(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_electrumclient_ping();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_esploraclient_broadcast(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_esploraclient_broadcast();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_esploraclient_full_scan(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_esploraclient_full_scan();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_esploraclient_full_scan_to_index(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_esploraclient_full_scan_to_index();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_foreignpersister_get(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_foreignpersister_get();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_foreignpersister_push(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_foreignpersister_push();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_issuance_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_issuance_asset();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_issuance_is_issuance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_issuance_is_issuance();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_issuance_is_reissuance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_issuance_is_reissuance();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_issuance_prev_txid(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_issuance_prev_txid();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_issuance_prev_vout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_issuance_prev_vout();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_issuance_token(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_issuance_token();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_network_default_electrum_client(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_network_default_electrum_client();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_network_default_esplora_client(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_network_default_esplora_client();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_network_is_mainnet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_network_is_mainnet();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_network_policy_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_network_policy_asset();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_network_tx_builder(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_network_tx_builder();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_outpoint_txid(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_outpoint_txid();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_outpoint_vout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_outpoint_vout();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_precision_sats_to_string(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_precision_sats_to_string();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_precision_string_to_sats(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_precision_string_to_sats();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_pset_extract_tx(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_pset_extract_tx();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_pset_finalize(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_pset_finalize();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_pset_inputs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_pset_inputs();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_psetbalance_balances(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetbalance_balances();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_psetbalance_fee(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetbalance_fee();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_psetbalance_recipients(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetbalance_recipients();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_psetdetails_balance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetdetails_balance();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_psetdetails_inputs_issuances(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetdetails_inputs_issuances();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_psetdetails_signatures(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetdetails_signatures();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_psetinput_issuance_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetinput_issuance_asset();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_psetinput_issuance_token(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetinput_issuance_token();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_psetinput_previous_script_pubkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetinput_previous_script_pubkey();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_psetinput_previous_txid(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetinput_previous_txid();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_psetinput_previous_vout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetinput_previous_vout();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_psetinput_redeem_script(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetinput_redeem_script();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_psetsignatures_has_signature(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetsignatures_has_signature();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_psetsignatures_missing_signature(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_psetsignatures_missing_signature();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_recipient_address(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_recipient_address();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_recipient_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_recipient_asset();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_recipient_value(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_recipient_value();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_recipient_vout(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_recipient_vout();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_script_asm(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_script_asm();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_script_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_script_bytes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_secretkey_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_secretkey_bytes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_signer_keyorigin_xpub(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_signer_keyorigin_xpub();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_signer_mnemonic(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_signer_mnemonic();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_signer_sign(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_signer_sign();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_signer_wpkh_slip77_descriptor(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_signer_wpkh_slip77_descriptor();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_testenv_electrum_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_testenv_electrum_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_testenv_generate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_testenv_generate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_testenv_get_new_address(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_testenv_get_new_address();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_testenv_height(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_testenv_height();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_testenv_issue_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_testenv_issue_asset();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_testenv_send_to_address(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_testenv_send_to_address();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_transaction_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_transaction_bytes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_transaction_fee(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_transaction_fee();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_transaction_inputs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_transaction_inputs();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_transaction_outputs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_transaction_outputs();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_transaction_txid(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_transaction_txid();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txbuilder_add_burn(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txbuilder_add_burn();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_txbuilder_add_lbtc_recipient(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txbuilder_add_lbtc_recipient();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txbuilder_add_recipient(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txbuilder_add_recipient();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txbuilder_drain_lbtc_to(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txbuilder_drain_lbtc_to();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_txbuilder_drain_lbtc_wallet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txbuilder_drain_lbtc_wallet();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txbuilder_fee_rate(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txbuilder_fee_rate();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txbuilder_finish(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txbuilder_finish();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txbuilder_issue_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txbuilder_issue_asset();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txbuilder_reissue_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txbuilder_reissue_asset();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txbuilder_set_wallet_utxos(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txbuilder_set_wallet_utxos();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txin_outpoint(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txin_outpoint();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txout_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txout_asset();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txout_is_fee(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txout_is_fee();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txout_is_partially_blinded(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txout_is_partially_blinded();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txout_script_pubkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txout_script_pubkey();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txout_unblind(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txout_unblind();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txout_value(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txout_value();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txoutsecrets_asset(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txoutsecrets_asset();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txoutsecrets_asset_bf(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txoutsecrets_asset_bf();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txoutsecrets_value(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txoutsecrets_value();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txoutsecrets_value_bf(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txoutsecrets_value_bf();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_txid_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_txid_bytes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_update_only_tip(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_update_only_tip();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_update_serialize(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_update_serialize();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettx_balance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettx_balance();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettx_fee(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettx_fee();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettx_height(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettx_height();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettx_inputs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettx_inputs();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettx_outputs(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettx_outputs();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettx_timestamp(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettx_timestamp();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettx_tx(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettx_tx();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettx_txid(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettx_txid();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettx_type_(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettx_type_();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettx_unblinded_url(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettx_unblinded_url();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettxout_address(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettxout_address();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettxout_ext_int(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettxout_ext_int();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettxout_height(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettxout_height();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettxout_outpoint(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettxout_outpoint();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettxout_script_pubkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettxout_script_pubkey();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettxout_unblinded(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettxout_unblinded();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wallettxout_wildcard_index(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wallettxout_wildcard_index();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wollet_address(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wollet_address();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wollet_apply_update(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wollet_apply_update();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wollet_balance(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wollet_balance();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wollet_descriptor(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wollet_descriptor();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wollet_finalize(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wollet_finalize();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wollet_pset_details(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wollet_pset_details();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wollet_transactions(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wollet_transactions();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wollet_txos(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wollet_txos();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wollet_utxos(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wollet_utxos();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_method_wollet_wait_for_tx(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wollet_wait_for_tx();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_wolletdescriptor_derive_blinding_key(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value =
      uniffi_lwk_checksum_method_wolletdescriptor_derive_blinding_key();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_wolletdescriptor_is_mainnet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wolletdescriptor_is_mainnet();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_method_wolletdescriptor_script_pubkey(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_method_wolletdescriptor_script_pubkey();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_address_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_address_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_amp2_new_testnet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_amp2_new_testnet();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_bip_new_bip49(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_bip_new_bip49();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_bip_new_bip84(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_bip_new_bip84();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_bip_new_bip87(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_bip_new_bip87();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_contract_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_contract_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_electrumclient_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_electrumclient_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_esploraclient_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_esploraclient_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_constructor_esploraclient_new_waterfalls(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_esploraclient_new_waterfalls();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_constructor_foreignpersisterlink_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_foreignpersisterlink_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_mnemonic_from_entropy(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_mnemonic_from_entropy();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_mnemonic_from_random(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_mnemonic_from_random();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_mnemonic_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_mnemonic_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_network_mainnet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_network_mainnet();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_network_regtest(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_network_regtest();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_constructor_network_regtest_default(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_network_regtest_default();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_network_testnet(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_network_testnet();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_outpoint_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_outpoint_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_precision_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_precision_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_pset_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_pset_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_script_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_script_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_secretkey_from_bytes(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_secretkey_from_bytes();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_signer_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_signer_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_signer_random(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_signer_random();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_testenv_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_testenv_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_transaction_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_transaction_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_txbuilder_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_txbuilder_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_txid_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_txid_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_update_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_update_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_wollet_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_wollet_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeLwk::cpp_uniffi_lwk_checksum_constructor_wollet_with_custom_persister(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_wollet_with_custom_persister();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_checksum_constructor_wolletdescriptor_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_lwk_checksum_constructor_wolletdescriptor_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_ffi_lwk_uniffi_contract_version(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = ffi_lwk_uniffi_contract_version();

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeLwk::cpp_uniffi_lwk_fn_init_callback_vtable_foreignpersister(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  static UniffiVTableCallbackInterfaceForeignPersister vtableInstance =
      uniffi::lwk::Bridging<
          UniffiVTableCallbackInterfaceForeignPersister>::fromJs(rt,
                                                                 callInvoker,
                                                                 args[0]);
  uniffi_lwk_fn_init_callback_vtable_foreignpersister(&vtableInstance);
  return jsi::Value::undefined();
}