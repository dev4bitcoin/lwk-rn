// This file was autogenerated by some hot garbage in the `uniffi-bindgen-react-native` crate.
// Trust me, you don't want to mess with it!
import nativeModule, {
  type UniffiRustFutureContinuationCallback,
  type UniffiForeignFuture,
  type UniffiForeignFutureStructU8,
  type UniffiForeignFutureCompleteU8,
  type UniffiForeignFutureStructI8,
  type UniffiForeignFutureCompleteI8,
  type UniffiForeignFutureStructU16,
  type UniffiForeignFutureCompleteU16,
  type UniffiForeignFutureStructI16,
  type UniffiForeignFutureCompleteI16,
  type UniffiForeignFutureStructU32,
  type UniffiForeignFutureCompleteU32,
  type UniffiForeignFutureStructI32,
  type UniffiForeignFutureCompleteI32,
  type UniffiForeignFutureStructU64,
  type UniffiForeignFutureCompleteU64,
  type UniffiForeignFutureStructI64,
  type UniffiForeignFutureCompleteI64,
  type UniffiForeignFutureStructF32,
  type UniffiForeignFutureCompleteF32,
  type UniffiForeignFutureStructF64,
  type UniffiForeignFutureCompleteF64,
  type UniffiForeignFutureStructPointer,
  type UniffiForeignFutureCompletePointer,
  type UniffiForeignFutureStructRustBuffer,
  type UniffiForeignFutureCompleteRustBuffer,
  type UniffiForeignFutureStructVoid,
  type UniffiForeignFutureCompleteVoid,
  type UniffiVTableCallbackInterfaceForeignPersister,
} from './lwk-ffi';
import {
  type FfiConverter,
  type UniffiByteArray,
  type UniffiHandle,
  type UniffiObjectFactory,
  type UniffiReferenceHolder,
  type UniffiRustArcPtr,
  type UniffiRustCallStatus,
  type UnsafeMutableRawPointer,
  AbstractFfiConverterByteArray,
  FfiConverterArray,
  FfiConverterArrayBuffer,
  FfiConverterBool,
  FfiConverterFloat32,
  FfiConverterInt32,
  FfiConverterInt64,
  FfiConverterMap,
  FfiConverterObject,
  FfiConverterObjectWithCallbacks,
  FfiConverterOptional,
  FfiConverterUInt32,
  FfiConverterUInt64,
  FfiConverterUInt8,
  RustBuffer,
  UniffiAbstractObject,
  UniffiError,
  UniffiInternalError,
  UniffiResult,
  UniffiRustCaller,
  destructorGuardSymbol,
  pointerLiteralSymbol,
  uniffiCreateFfiConverterString,
  uniffiTraitInterfaceCallWithError,
  uniffiTypeNameSymbol,
  variantOrdinalSymbol,
} from 'uniffi-bindgen-react-native';

// Get converters from the other files, if any.
const uniffiCaller = new UniffiRustCaller();

const uniffiIsDebug =
  // @ts-ignore -- The process global might not be defined
  typeof process !== 'object' ||
  // @ts-ignore -- The process global might not be defined
  process?.env?.NODE_ENV !== 'production' ||
  false;
// Public interface members begin here.

export function isProvablySegwit(
  scriptPubkey: ScriptInterface,
  redeemScript: ScriptInterface | undefined
): boolean {
  return FfiConverterBool.lift(
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_func_is_provably_segwit(
          FfiConverterTypeScript.lower(scriptPubkey),
          FfiConverterOptionalTypeScript.lower(redeemScript),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    )
  );
}

const stringConverter = {
  stringToBytes: (s: string) =>
    uniffiCaller.rustCall((status) =>
      nativeModule().ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer(
        s,
        status
      )
    ),
  bytesToString: (ab: UniffiByteArray) =>
    uniffiCaller.rustCall((status) =>
      nativeModule().ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string(
        ab,
        status
      )
    ),
  stringByteLength: (s: string) =>
    uniffiCaller.rustCall((status) =>
      nativeModule().ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length(
        s,
        status
      )
    ),
};
const FfiConverterString = uniffiCreateFfiConverterString(stringConverter);

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
export type AssetId = string;
// FfiConverter for AssetId, a type alias for string.
const FfiConverterTypeAssetId = FfiConverterString;

/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
export type Hex = string;
// FfiConverter for Hex, a type alias for string.
const FfiConverterTypeHex = FfiConverterString;

/**
 * see [`lwk_wollet::Chain`]
 */
export enum Chain {
  /**
   * External address, shown when asked for a payment.
   * Wallet having a single descriptor are considered External
   */
  External,
  /**
   * Internal address, used for the change
   */
  Internal,
}

const FfiConverterTypeChain = (() => {
  const ordinalConverter = FfiConverterInt32;
  type TypeName = Chain;
  class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
    read(from: RustBuffer): TypeName {
      switch (ordinalConverter.read(from)) {
        case 1:
          return Chain.External;
        case 2:
          return Chain.Internal;
        default:
          throw new UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value: TypeName, into: RustBuffer): void {
      switch (value) {
        case Chain.External:
          return ordinalConverter.write(1, into);
        case Chain.Internal:
          return ordinalConverter.write(2, into);
      }
    }
    allocationSize(value: TypeName): number {
      return ordinalConverter.allocationSize(0);
    }
  }
  return new FFIConverter();
})();

// Error type: LwkError

// Enum: LwkError
export enum LwkError_Tags {
  Generic = 'Generic',
  PoisonError = 'PoisonError',
}
/**
 * Possible errors emitted
 */
export const LwkError = (() => {
  type Generic__interface = {
    tag: LwkError_Tags.Generic;
    inner: Readonly<{ msg: string }>;
  };

  class Generic_ extends UniffiError implements Generic__interface {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    readonly [uniffiTypeNameSymbol] = 'LwkError';
    readonly tag = LwkError_Tags.Generic;
    readonly inner: Readonly<{ msg: string }>;
    constructor(inner: { msg: string }) {
      super('LwkError', 'Generic');
      this.inner = Object.freeze(inner);
    }

    static new(inner: { msg: string }): Generic_ {
      return new Generic_(inner);
    }

    static instanceOf(obj: any): obj is Generic_ {
      return obj.tag === LwkError_Tags.Generic;
    }

    static hasInner(obj: any): obj is Generic_ {
      return Generic_.instanceOf(obj);
    }

    static getInner(obj: Generic_): Readonly<{ msg: string }> {
      return obj.inner;
    }
  }

  type PoisonError__interface = {
    tag: LwkError_Tags.PoisonError;
    inner: Readonly<{ msg: string }>;
  };

  class PoisonError_ extends UniffiError implements PoisonError__interface {
    /**
     * @private
     * This field is private and should not be used, use `tag` instead.
     */
    readonly [uniffiTypeNameSymbol] = 'LwkError';
    readonly tag = LwkError_Tags.PoisonError;
    readonly inner: Readonly<{ msg: string }>;
    constructor(inner: { msg: string }) {
      super('LwkError', 'PoisonError');
      this.inner = Object.freeze(inner);
    }

    static new(inner: { msg: string }): PoisonError_ {
      return new PoisonError_(inner);
    }

    static instanceOf(obj: any): obj is PoisonError_ {
      return obj.tag === LwkError_Tags.PoisonError;
    }

    static hasInner(obj: any): obj is PoisonError_ {
      return PoisonError_.instanceOf(obj);
    }

    static getInner(obj: PoisonError_): Readonly<{ msg: string }> {
      return obj.inner;
    }
  }

  function instanceOf(obj: any): obj is LwkError {
    return obj[uniffiTypeNameSymbol] === 'LwkError';
  }

  return Object.freeze({
    instanceOf,
    Generic: Generic_,
    PoisonError: PoisonError_,
  });
})();

/**
 * Possible errors emitted
 */

export type LwkError = InstanceType<
  (typeof LwkError)[keyof Omit<typeof LwkError, 'instanceOf'>]
>;

// FfiConverter for enum LwkError
const FfiConverterTypeLwkError = (() => {
  const ordinalConverter = FfiConverterInt32;
  type TypeName = LwkError;
  class FFIConverter extends AbstractFfiConverterByteArray<TypeName> {
    read(from: RustBuffer): TypeName {
      switch (ordinalConverter.read(from)) {
        case 1:
          return new LwkError.Generic({ msg: FfiConverterString.read(from) });
        case 2:
          return new LwkError.PoisonError({
            msg: FfiConverterString.read(from),
          });
        default:
          throw new UniffiInternalError.UnexpectedEnumCase();
      }
    }
    write(value: TypeName, into: RustBuffer): void {
      switch (value.tag) {
        case LwkError_Tags.Generic: {
          ordinalConverter.write(1, into);
          const inner = value.inner;
          FfiConverterString.write(inner.msg, into);
          return;
        }
        case LwkError_Tags.PoisonError: {
          ordinalConverter.write(2, into);
          const inner = value.inner;
          FfiConverterString.write(inner.msg, into);
          return;
        }
        default:
          // Throwing from here means that LwkError_Tags hasn't matched an ordinal.
          throw new UniffiInternalError.UnexpectedEnumCase();
      }
    }
    allocationSize(value: TypeName): number {
      switch (value.tag) {
        case LwkError_Tags.Generic: {
          const inner = value.inner;
          let size = ordinalConverter.allocationSize(1);
          size += FfiConverterString.allocationSize(inner.msg);
          return size;
        }
        case LwkError_Tags.PoisonError: {
          const inner = value.inner;
          let size = ordinalConverter.allocationSize(2);
          size += FfiConverterString.allocationSize(inner.msg);
          return size;
        }
        default:
          throw new UniffiInternalError.UnexpectedEnumCase();
      }
    }
  }
  return new FFIConverter();
})();

// FfiConverter for Map<string, string>
const FfiConverterMapStringString = new FfiConverterMap(
  FfiConverterString,
  FfiConverterString
);

export interface AddressInterface {
  isBlinded(): boolean;
  /**
   * Returns a string of the QR code printable in a terminal environment
   */
  qrCodeText() /*throws*/ : string;
  /**
   * Returns a string encoding an image in a uri
   *
   * The string can be open in the browser or be used as `src` field in `img` in HTML
   *
   * For max efficiency we suggest to pass `None` to `pixel_per_module`, get a very small image
   * and use styling to scale up the image in the browser. eg
   * `style="image-rendering: pixelated; border: 20px solid white;"`
   */
  qrCodeUri(pixelPerModule: /*u8*/ number | undefined) /*throws*/ : string;
  scriptPubkey(): ScriptInterface;
  toUnconfidential(): AddressInterface;
}

export class Address extends UniffiAbstractObject implements AddressInterface {
  readonly [uniffiTypeNameSymbol] = 'Address';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct an Address object
   */
  constructor(s: string) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_address_new(
          FfiConverterString.lower(s),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeAddressObjectFactory.bless(pointer);
  }

  public isBlinded(): boolean {
    return FfiConverterBool.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_address_is_blinded(
            uniffiTypeAddressObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Returns a string of the QR code printable in a terminal environment
   */
  public qrCodeText(): string /*throws*/ {
    return FfiConverterString.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_address_qr_code_text(
            uniffiTypeAddressObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Returns a string encoding an image in a uri
   *
   * The string can be open in the browser or be used as `src` field in `img` in HTML
   *
   * For max efficiency we suggest to pass `None` to `pixel_per_module`, get a very small image
   * and use styling to scale up the image in the browser. eg
   * `style="image-rendering: pixelated; border: 20px solid white;"`
   */
  public qrCodeUri(
    pixelPerModule: /*u8*/ number | undefined
  ): string /*throws*/ {
    return FfiConverterString.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_address_qr_code_uri(
            uniffiTypeAddressObjectFactory.clonePointer(this),
            FfiConverterOptionalUInt8.lower(pixelPerModule),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public scriptPubkey(): ScriptInterface {
    return FfiConverterTypeScript.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_address_script_pubkey(
            uniffiTypeAddressObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public toUnconfidential(): AddressInterface {
    return FfiConverterTypeAddress.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_address_to_unconfidential(
            uniffiTypeAddressObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Calls into the `AddressInterface::to_string()` method of the native Rust peer.
   *
   * Generated by deriving the `Display` trait in Rust.
   */
  toString(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_address_uniffi_trait_display(
            uniffiTypeAddressObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeAddressObjectFactory.pointer(this);
      uniffiTypeAddressObjectFactory.freePointer(pointer);
      uniffiTypeAddressObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Address {
    return uniffiTypeAddressObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeAddressObjectFactory: UniffiObjectFactory<AddressInterface> = {
  create(pointer: UnsafeMutableRawPointer): AddressInterface {
    const instance = Object.create(Address.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'Address';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_address_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: AddressInterface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: AddressInterface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_address(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_address(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is AddressInterface {
    return (
      obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Address'
    );
  },
};
// FfiConverter for AddressInterface
const FfiConverterTypeAddress = new FfiConverterObject(
  uniffiTypeAddressObjectFactory
);

export interface AddressResultInterface {
  address(): AddressInterface;
  index(): /*u32*/ number;
}

export class AddressResult
  extends UniffiAbstractObject
  implements AddressResultInterface
{
  readonly [uniffiTypeNameSymbol] = 'AddressResult';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeAddressResultObjectFactory.bless(pointer);
  }

  public address(): AddressInterface {
    return FfiConverterTypeAddress.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_addressresult_address(
            uniffiTypeAddressResultObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public index(): /*u32*/ number {
    return FfiConverterUInt32.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_addressresult_index(
            uniffiTypeAddressResultObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeAddressResultObjectFactory.pointer(this);
      uniffiTypeAddressResultObjectFactory.freePointer(pointer);
      uniffiTypeAddressResultObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is AddressResult {
    return uniffiTypeAddressResultObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeAddressResultObjectFactory: UniffiObjectFactory<AddressResultInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): AddressResultInterface {
      const instance = Object.create(AddressResult.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'AddressResult';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_addressresult_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: AddressResultInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: AddressResultInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_addressresult(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_addressresult(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is AddressResultInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'AddressResult'
      );
    },
  };
// FfiConverter for AddressResultInterface
const FfiConverterTypeAddressResult = new FfiConverterObject(
  uniffiTypeAddressResultObjectFactory
);

/**
 * Wrapper over [`lwk_wollet::amp2::Amp2`]
 */
export interface Amp2Interface {
  /**
   * Ask the AMP2 server to cosign a PSET
   */
  cosign(pset: PsetInterface) /*throws*/ : PsetInterface;
  /**
   * Create an AMP2 wallet descriptor from the keyorigin xpub of a signer
   */
  descriptorFromStr(keyoriginXpub: string) /*throws*/ : Amp2DescriptorInterface;
  /**
   * Register an AMP2 wallet with the AMP2 server
   */
  register(desc: Amp2DescriptorInterface) /*throws*/ : string;
}

/**
 * Wrapper over [`lwk_wollet::amp2::Amp2`]
 */
export class Amp2 extends UniffiAbstractObject implements Amp2Interface {
  readonly [uniffiTypeNameSymbol] = 'Amp2';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeAmp2ObjectFactory.bless(pointer);
  }

  /**
   * Construct an AMP2 context for Liquid Testnet
   */
  public static newTestnet(): Amp2Interface {
    return FfiConverterTypeAmp2.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_amp2_new_testnet(
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Ask the AMP2 server to cosign a PSET
   */
  public cosign(pset: PsetInterface): PsetInterface /*throws*/ {
    return FfiConverterTypePset.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_amp2_cosign(
            uniffiTypeAmp2ObjectFactory.clonePointer(this),
            FfiConverterTypePset.lower(pset),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Create an AMP2 wallet descriptor from the keyorigin xpub of a signer
   */
  public descriptorFromStr(
    keyoriginXpub: string
  ): Amp2DescriptorInterface /*throws*/ {
    return FfiConverterTypeAmp2Descriptor.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_amp2_descriptor_from_str(
            uniffiTypeAmp2ObjectFactory.clonePointer(this),
            FfiConverterString.lower(keyoriginXpub),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Register an AMP2 wallet with the AMP2 server
   */
  public register(desc: Amp2DescriptorInterface): string /*throws*/ {
    return FfiConverterString.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_amp2_register(
            uniffiTypeAmp2ObjectFactory.clonePointer(this),
            FfiConverterTypeAmp2Descriptor.lower(desc),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeAmp2ObjectFactory.pointer(this);
      uniffiTypeAmp2ObjectFactory.freePointer(pointer);
      uniffiTypeAmp2ObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Amp2 {
    return uniffiTypeAmp2ObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeAmp2ObjectFactory: UniffiObjectFactory<Amp2Interface> = {
  create(pointer: UnsafeMutableRawPointer): Amp2Interface {
    const instance = Object.create(Amp2.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'Amp2';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_amp2_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: Amp2Interface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: Amp2Interface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_amp2(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_amp2(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is Amp2Interface {
    return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Amp2';
  },
};
// FfiConverter for Amp2Interface
const FfiConverterTypeAmp2 = new FfiConverterObject(
  uniffiTypeAmp2ObjectFactory
);

/**
 * Wrapper over [`lwk_wollet::amp2::Amp2Descriptor`]
 */
export interface Amp2DescriptorInterface {
  descriptor(): WolletDescriptorInterface;
}

/**
 * Wrapper over [`lwk_wollet::amp2::Amp2Descriptor`]
 */
export class Amp2Descriptor
  extends UniffiAbstractObject
  implements Amp2DescriptorInterface
{
  readonly [uniffiTypeNameSymbol] = 'Amp2Descriptor';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeAmp2DescriptorObjectFactory.bless(pointer);
  }

  public descriptor(): WolletDescriptorInterface {
    return FfiConverterTypeWolletDescriptor.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_amp2descriptor_descriptor(
            uniffiTypeAmp2DescriptorObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Calls into the `Amp2DescriptorInterface::to_string()` method of the native Rust peer.
   *
   * Generated by deriving the `Display` trait in Rust.
   */
  toString(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_amp2descriptor_uniffi_trait_display(
            uniffiTypeAmp2DescriptorObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeAmp2DescriptorObjectFactory.pointer(this);
      uniffiTypeAmp2DescriptorObjectFactory.freePointer(pointer);
      uniffiTypeAmp2DescriptorObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Amp2Descriptor {
    return uniffiTypeAmp2DescriptorObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeAmp2DescriptorObjectFactory: UniffiObjectFactory<Amp2DescriptorInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): Amp2DescriptorInterface {
      const instance = Object.create(Amp2Descriptor.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'Amp2Descriptor';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_amp2descriptor_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: Amp2DescriptorInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: Amp2DescriptorInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_amp2descriptor(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_amp2descriptor(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is Amp2DescriptorInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'Amp2Descriptor'
      );
    },
  };
// FfiConverter for Amp2DescriptorInterface
const FfiConverterTypeAmp2Descriptor = new FfiConverterObject(
  uniffiTypeAmp2DescriptorObjectFactory
);

/**
 * wrapper over [`lwk_common::Bip`]
 */
export interface BipInterface {}

/**
 * wrapper over [`lwk_common::Bip`]
 */
export class Bip extends UniffiAbstractObject implements BipInterface {
  readonly [uniffiTypeNameSymbol] = 'Bip';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeBipObjectFactory.bless(pointer);
  }

  /**
   * For P2SH-P2WPKH wallets
   */
  public static newBip49(): BipInterface {
    return FfiConverterTypeBip.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_bip_new_bip49(
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * For P2WPKH wallets
   */
  public static newBip84(): BipInterface {
    return FfiConverterTypeBip.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_bip_new_bip84(
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * For multisig wallets
   */
  public static newBip87(): BipInterface {
    return FfiConverterTypeBip.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_bip_new_bip87(
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeBipObjectFactory.pointer(this);
      uniffiTypeBipObjectFactory.freePointer(pointer);
      uniffiTypeBipObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Bip {
    return uniffiTypeBipObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeBipObjectFactory: UniffiObjectFactory<BipInterface> = {
  create(pointer: UnsafeMutableRawPointer): BipInterface {
    const instance = Object.create(Bip.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'Bip';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_bip_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: BipInterface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: BipInterface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_bip(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_bip(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is BipInterface {
    return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Bip';
  },
};
// FfiConverter for BipInterface
const FfiConverterTypeBip = new FfiConverterObject(uniffiTypeBipObjectFactory);

/**
 * Wrapper over [`lwk_wollet::Contract`]
 */
export interface ContractInterface {}

/**
 * Wrapper over [`lwk_wollet::Contract`]
 */
export class Contract
  extends UniffiAbstractObject
  implements ContractInterface
{
  readonly [uniffiTypeNameSymbol] = 'Contract';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct a Contract object
   */
  constructor(
    domain: string,
    issuerPubkey: string,
    name: string,
    precision: /*u8*/ number,
    ticker: string,
    version: /*u8*/ number
  ) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_contract_new(
          FfiConverterString.lower(domain),
          FfiConverterString.lower(issuerPubkey),
          FfiConverterString.lower(name),
          FfiConverterUInt8.lower(precision),
          FfiConverterString.lower(ticker),
          FfiConverterUInt8.lower(version),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeContractObjectFactory.bless(pointer);
  }

  /**
   * Calls into the `ContractInterface::to_string()` method of the native Rust peer.
   *
   * Generated by deriving the `Display` trait in Rust.
   */
  toString(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_contract_uniffi_trait_display(
            uniffiTypeContractObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeContractObjectFactory.pointer(this);
      uniffiTypeContractObjectFactory.freePointer(pointer);
      uniffiTypeContractObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Contract {
    return uniffiTypeContractObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeContractObjectFactory: UniffiObjectFactory<ContractInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): ContractInterface {
      const instance = Object.create(Contract.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'Contract';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_contract_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: ContractInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: ContractInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_contract(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_contract(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is ContractInterface {
      return (
        obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Contract'
      );
    },
  };
// FfiConverter for ContractInterface
const FfiConverterTypeContract = new FfiConverterObject(
  uniffiTypeContractObjectFactory
);

/**
 * Wrapper over [`lwk_wollet::ElectrumClient`]
 */
export interface ElectrumClientInterface {
  broadcast(tx: TransactionInterface) /*throws*/ : TxidInterface;
  fullScan(wollet: WolletInterface) /*throws*/ : UpdateInterface | undefined;
  fullScanToIndex(
    wollet: WolletInterface,
    index: /*u32*/ number
  ) /*throws*/ : UpdateInterface | undefined;
  ping() /*throws*/ : void;
}

/**
 * Wrapper over [`lwk_wollet::ElectrumClient`]
 */
export class ElectrumClient
  extends UniffiAbstractObject
  implements ElectrumClientInterface
{
  readonly [uniffiTypeNameSymbol] = 'ElectrumClient';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct an Electrum client
   */
  constructor(
    electrumUrl: string,
    tls: boolean,
    validateDomain: boolean
  ) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_electrumclient_new(
          FfiConverterString.lower(electrumUrl),
          FfiConverterBool.lower(tls),
          FfiConverterBool.lower(validateDomain),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeElectrumClientObjectFactory.bless(pointer);
  }

  public broadcast(tx: TransactionInterface): TxidInterface /*throws*/ {
    return FfiConverterTypeTxid.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_electrumclient_broadcast(
            uniffiTypeElectrumClientObjectFactory.clonePointer(this),
            FfiConverterTypeTransaction.lower(tx),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public fullScan(
    wollet: WolletInterface
  ): UpdateInterface | undefined /*throws*/ {
    return FfiConverterOptionalTypeUpdate.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_electrumclient_full_scan(
            uniffiTypeElectrumClientObjectFactory.clonePointer(this),
            FfiConverterTypeWollet.lower(wollet),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public fullScanToIndex(
    wollet: WolletInterface,
    index: /*u32*/ number
  ): UpdateInterface | undefined /*throws*/ {
    return FfiConverterOptionalTypeUpdate.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_electrumclient_full_scan_to_index(
            uniffiTypeElectrumClientObjectFactory.clonePointer(this),
            FfiConverterTypeWollet.lower(wollet),
            FfiConverterUInt32.lower(index),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public ping(): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_electrumclient_ping(
          uniffiTypeElectrumClientObjectFactory.clonePointer(this),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeElectrumClientObjectFactory.pointer(this);
      uniffiTypeElectrumClientObjectFactory.freePointer(pointer);
      uniffiTypeElectrumClientObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is ElectrumClient {
    return uniffiTypeElectrumClientObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeElectrumClientObjectFactory: UniffiObjectFactory<ElectrumClientInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): ElectrumClientInterface {
      const instance = Object.create(ElectrumClient.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'ElectrumClient';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_electrumclient_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: ElectrumClientInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: ElectrumClientInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_electrumclient(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_electrumclient(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is ElectrumClientInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'ElectrumClient'
      );
    },
  };
// FfiConverter for ElectrumClientInterface
const FfiConverterTypeElectrumClient = new FfiConverterObject(
  uniffiTypeElectrumClientObjectFactory
);

/**
 * Wrapper over [`blocking::EsploraClient`]
 */
export interface EsploraClientInterface {
  broadcast(tx: TransactionInterface) /*throws*/ : TxidInterface;
  /**
   * See [`BlockchainBackend::full_scan`]
   */
  fullScan(wollet: WolletInterface) /*throws*/ : UpdateInterface | undefined;
  /**
   * See [`BlockchainBackend::full_scan_to_index`]
   */
  fullScanToIndex(
    wollet: WolletInterface,
    index: /*u32*/ number
  ) /*throws*/ : UpdateInterface | undefined;
}

/**
 * Wrapper over [`blocking::EsploraClient`]
 */
export class EsploraClient
  extends UniffiAbstractObject
  implements EsploraClientInterface
{
  readonly [uniffiTypeNameSymbol] = 'EsploraClient';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct an Esplora Client
   */
  constructor(url: string, network: NetworkInterface) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_esploraclient_new(
          FfiConverterString.lower(url),
          FfiConverterTypeNetwork.lower(network),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeEsploraClientObjectFactory.bless(pointer);
  }

  /**
   * Construct an Esplora Client using Waterfalls endpoint
   */
  public static newWaterfalls(
    url: string,
    network: NetworkInterface
  ): EsploraClientInterface /*throws*/ {
    return FfiConverterTypeEsploraClient.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_esploraclient_new_waterfalls(
            FfiConverterString.lower(url),
            FfiConverterTypeNetwork.lower(network),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public broadcast(tx: TransactionInterface): TxidInterface /*throws*/ {
    return FfiConverterTypeTxid.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_esploraclient_broadcast(
            uniffiTypeEsploraClientObjectFactory.clonePointer(this),
            FfiConverterTypeTransaction.lower(tx),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * See [`BlockchainBackend::full_scan`]
   */
  public fullScan(
    wollet: WolletInterface
  ): UpdateInterface | undefined /*throws*/ {
    return FfiConverterOptionalTypeUpdate.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_esploraclient_full_scan(
            uniffiTypeEsploraClientObjectFactory.clonePointer(this),
            FfiConverterTypeWollet.lower(wollet),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * See [`BlockchainBackend::full_scan_to_index`]
   */
  public fullScanToIndex(
    wollet: WolletInterface,
    index: /*u32*/ number
  ): UpdateInterface | undefined /*throws*/ {
    return FfiConverterOptionalTypeUpdate.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_esploraclient_full_scan_to_index(
            uniffiTypeEsploraClientObjectFactory.clonePointer(this),
            FfiConverterTypeWollet.lower(wollet),
            FfiConverterUInt32.lower(index),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeEsploraClientObjectFactory.pointer(this);
      uniffiTypeEsploraClientObjectFactory.freePointer(pointer);
      uniffiTypeEsploraClientObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is EsploraClient {
    return uniffiTypeEsploraClientObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeEsploraClientObjectFactory: UniffiObjectFactory<EsploraClientInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): EsploraClientInterface {
      const instance = Object.create(EsploraClient.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'EsploraClient';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_esploraclient_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: EsploraClientInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: EsploraClientInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_esploraclient(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_esploraclient(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is EsploraClientInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'EsploraClient'
      );
    },
  };
// FfiConverter for EsploraClientInterface
const FfiConverterTypeEsploraClient = new FfiConverterObject(
  uniffiTypeEsploraClientObjectFactory
);

/**
 * An exported trait, useful for caller-defined persistence.
 */
export interface ForeignPersister {
  get(index: /*u64*/ bigint) /*throws*/ : UpdateInterface | undefined;
  push(update: UpdateInterface) /*throws*/ : void;
}

/**
 * An exported trait, useful for caller-defined persistence.
 */
export class ForeignPersisterImpl
  extends UniffiAbstractObject
  implements ForeignPersister
{
  readonly [uniffiTypeNameSymbol] = 'ForeignPersisterImpl';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeForeignPersisterImplObjectFactory.bless(pointer);
  }

  public get(index: /*u64*/ bigint): UpdateInterface | undefined /*throws*/ {
    return FfiConverterOptionalTypeUpdate.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_foreignpersister_get(
            uniffiTypeForeignPersisterImplObjectFactory.clonePointer(this),
            FfiConverterUInt64.lower(index),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public push(update: UpdateInterface): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_foreignpersister_push(
          uniffiTypeForeignPersisterImplObjectFactory.clonePointer(this),
          FfiConverterTypeUpdate.lower(update),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeForeignPersisterImplObjectFactory.pointer(this);
      uniffiTypeForeignPersisterImplObjectFactory.freePointer(pointer);
      uniffiTypeForeignPersisterImplObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is ForeignPersisterImpl {
    return uniffiTypeForeignPersisterImplObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeForeignPersisterImplObjectFactory: UniffiObjectFactory<ForeignPersister> =
  {
    create(pointer: UnsafeMutableRawPointer): ForeignPersister {
      const instance = Object.create(ForeignPersisterImpl.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'ForeignPersisterImpl';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_foreignpersister_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: ForeignPersister): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: ForeignPersister): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_foreignpersister(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_foreignpersister(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is ForeignPersister {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'ForeignPersisterImpl'
      );
    },
  };
// FfiConverter for ForeignPersister
const FfiConverterTypeForeignPersister = new FfiConverterObjectWithCallbacks(
  uniffiTypeForeignPersisterImplObjectFactory
);

// Add a vtavble for the callbacks that go in ForeignPersister.

// Put the implementation in a struct so we don't pollute the top-level namespace
const uniffiCallbackInterfaceForeignPersister: {
  vtable: UniffiVTableCallbackInterfaceForeignPersister;
  register: () => void;
} = {
  // Create the VTable using a series of closures.
  // ts automatically converts these into C callback functions.
  vtable: {
    get: (uniffiHandle: bigint, index: bigint) => {
      const uniffiMakeCall = (): UpdateInterface | undefined => {
        const jsCallback = FfiConverterTypeForeignPersister.lift(uniffiHandle);
        return jsCallback.get(FfiConverterUInt64.lift(index));
      };
      const uniffiResult = UniffiResult.ready<Uint8Array>();
      const uniffiHandleSuccess = (obj: any) => {
        UniffiResult.writeSuccess(
          uniffiResult,
          FfiConverterOptionalTypeUpdate.lower(obj)
        );
      };
      const uniffiHandleError = (code: number, errBuf: UniffiByteArray) => {
        UniffiResult.writeError(uniffiResult, code, errBuf);
      };
      uniffiTraitInterfaceCallWithError(
        /*makeCall:*/ uniffiMakeCall,
        /*handleSuccess:*/ uniffiHandleSuccess,
        /*handleError:*/ uniffiHandleError,
        /*isErrorType:*/ LwkError.instanceOf,
        /*lowerError:*/ FfiConverterTypeLwkError.lower.bind(
          FfiConverterTypeLwkError
        ),
        /*lowerString:*/ FfiConverterString.lower
      );
      return uniffiResult;
    },
    push: (uniffiHandle: bigint, update: bigint) => {
      const uniffiMakeCall = (): void => {
        const jsCallback = FfiConverterTypeForeignPersister.lift(uniffiHandle);
        return jsCallback.push(FfiConverterTypeUpdate.lift(update));
      };
      const uniffiResult = UniffiResult.ready<void>();
      const uniffiHandleSuccess = (obj: any) => {};
      const uniffiHandleError = (code: number, errBuf: UniffiByteArray) => {
        UniffiResult.writeError(uniffiResult, code, errBuf);
      };
      uniffiTraitInterfaceCallWithError(
        /*makeCall:*/ uniffiMakeCall,
        /*handleSuccess:*/ uniffiHandleSuccess,
        /*handleError:*/ uniffiHandleError,
        /*isErrorType:*/ LwkError.instanceOf,
        /*lowerError:*/ FfiConverterTypeLwkError.lower.bind(
          FfiConverterTypeLwkError
        ),
        /*lowerString:*/ FfiConverterString.lower
      );
      return uniffiResult;
    },
    uniffiFree: (uniffiHandle: UniffiHandle): void => {
      // ForeignPersister: this will throw a stale handle error if the handle isn't found.
      FfiConverterTypeForeignPersister.drop(uniffiHandle);
    },
  },
  register: () => {
    nativeModule().ubrn_uniffi_lwk_fn_init_callback_vtable_foreignpersister(
      uniffiCallbackInterfaceForeignPersister.vtable
    );
  },
};

/**
 * Implements [`ForeignPersister`]
 */
export interface ForeignPersisterLinkInterface {}

/**
 * Implements [`ForeignPersister`]
 */
export class ForeignPersisterLink
  extends UniffiAbstractObject
  implements ForeignPersisterLinkInterface
{
  readonly [uniffiTypeNameSymbol] = 'ForeignPersisterLink';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  constructor(persister: ForeignPersister) {
    super();
    const pointer = uniffiCaller.rustCall(
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_foreignpersisterlink_new(
          FfiConverterTypeForeignPersister.lower(persister),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeForeignPersisterLinkObjectFactory.bless(pointer);
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeForeignPersisterLinkObjectFactory.pointer(this);
      uniffiTypeForeignPersisterLinkObjectFactory.freePointer(pointer);
      uniffiTypeForeignPersisterLinkObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is ForeignPersisterLink {
    return uniffiTypeForeignPersisterLinkObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeForeignPersisterLinkObjectFactory: UniffiObjectFactory<ForeignPersisterLinkInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): ForeignPersisterLinkInterface {
      const instance = Object.create(ForeignPersisterLink.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'ForeignPersisterLink';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_foreignpersisterlink_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: ForeignPersisterLinkInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: ForeignPersisterLinkInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_foreignpersisterlink(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_foreignpersisterlink(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is ForeignPersisterLinkInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'ForeignPersisterLink'
      );
    },
  };
// FfiConverter for ForeignPersisterLinkInterface
const FfiConverterTypeForeignPersisterLink = new FfiConverterObject(
  uniffiTypeForeignPersisterLinkObjectFactory
);

export interface IssuanceInterface {
  asset(): AssetId | undefined;
  isIssuance(): boolean;
  isReissuance(): boolean;
  prevTxid(): TxidInterface | undefined;
  prevVout(): /*u32*/ number | undefined;
  token(): AssetId | undefined;
}

export class Issuance
  extends UniffiAbstractObject
  implements IssuanceInterface
{
  readonly [uniffiTypeNameSymbol] = 'Issuance';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeIssuanceObjectFactory.bless(pointer);
  }

  public asset(): AssetId | undefined {
    return FfiConverterOptionalTypeAssetId.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_issuance_asset(
            uniffiTypeIssuanceObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public isIssuance(): boolean {
    return FfiConverterBool.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_issuance_is_issuance(
            uniffiTypeIssuanceObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public isReissuance(): boolean {
    return FfiConverterBool.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_issuance_is_reissuance(
            uniffiTypeIssuanceObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public prevTxid(): TxidInterface | undefined {
    return FfiConverterOptionalTypeTxid.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_issuance_prev_txid(
            uniffiTypeIssuanceObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public prevVout(): /*u32*/ number | undefined {
    return FfiConverterOptionalUInt32.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_issuance_prev_vout(
            uniffiTypeIssuanceObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public token(): AssetId | undefined {
    return FfiConverterOptionalTypeAssetId.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_issuance_token(
            uniffiTypeIssuanceObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeIssuanceObjectFactory.pointer(this);
      uniffiTypeIssuanceObjectFactory.freePointer(pointer);
      uniffiTypeIssuanceObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Issuance {
    return uniffiTypeIssuanceObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeIssuanceObjectFactory: UniffiObjectFactory<IssuanceInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): IssuanceInterface {
      const instance = Object.create(Issuance.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'Issuance';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_issuance_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: IssuanceInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: IssuanceInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_issuance(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_issuance(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is IssuanceInterface {
      return (
        obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Issuance'
      );
    },
  };
// FfiConverter for IssuanceInterface
const FfiConverterTypeIssuance = new FfiConverterObject(
  uniffiTypeIssuanceObjectFactory
);

/**
 * Wrapper over [`bip39::Mnemonic`]
 */
export interface MnemonicInterface {}

/**
 * Wrapper over [`bip39::Mnemonic`]
 */
export class Mnemonic
  extends UniffiAbstractObject
  implements MnemonicInterface
{
  readonly [uniffiTypeNameSymbol] = 'Mnemonic';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct a Mnemonic type
   */
  constructor(s: string) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_mnemonic_new(
          FfiConverterString.lower(s),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeMnemonicObjectFactory.bless(pointer);
  }

  /**
   * Creates a Mnemonic from entropy, at least 16 bytes are needed.
   */
  public static fromEntropy(b: ArrayBuffer): MnemonicInterface /*throws*/ {
    return FfiConverterTypeMnemonic.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_mnemonic_from_entropy(
            FfiConverterArrayBuffer.lower(b),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Creates a random Mnemonic of given words (12,15,18,21,24)
   */
  public static fromRandom(
    wordCount: /*u8*/ number
  ): MnemonicInterface /*throws*/ {
    return FfiConverterTypeMnemonic.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_mnemonic_from_random(
            FfiConverterUInt8.lower(wordCount),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Calls into the `MnemonicInterface::to_string()` method of the native Rust peer.
   *
   * Generated by deriving the `Display` trait in Rust.
   */
  toString(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_mnemonic_uniffi_trait_display(
            uniffiTypeMnemonicObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeMnemonicObjectFactory.pointer(this);
      uniffiTypeMnemonicObjectFactory.freePointer(pointer);
      uniffiTypeMnemonicObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Mnemonic {
    return uniffiTypeMnemonicObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeMnemonicObjectFactory: UniffiObjectFactory<MnemonicInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): MnemonicInterface {
      const instance = Object.create(Mnemonic.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'Mnemonic';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_mnemonic_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: MnemonicInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: MnemonicInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_mnemonic(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_mnemonic(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is MnemonicInterface {
      return (
        obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Mnemonic'
      );
    },
  };
// FfiConverter for MnemonicInterface
const FfiConverterTypeMnemonic = new FfiConverterObject(
  uniffiTypeMnemonicObjectFactory
);

/**
 * Wrapper over [`lwk_wollet::ElementsNetwork`]
 */
export interface NetworkInterface {
  defaultElectrumClient() /*throws*/ : ElectrumClientInterface;
  defaultEsploraClient() /*throws*/ : EsploraClientInterface;
  isMainnet(): boolean;
  policyAsset(): AssetId;
  txBuilder(): TxBuilderInterface;
}

/**
 * Wrapper over [`lwk_wollet::ElementsNetwork`]
 */
export class Network extends UniffiAbstractObject implements NetworkInterface {
  readonly [uniffiTypeNameSymbol] = 'Network';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeNetworkObjectFactory.bless(pointer);
  }

  public static mainnet(): NetworkInterface {
    return FfiConverterTypeNetwork.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_network_mainnet(
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public static regtest(policyAsset: AssetId): NetworkInterface {
    return FfiConverterTypeNetwork.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_network_regtest(
            FfiConverterTypeAssetId.lower(policyAsset),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public static regtestDefault(): NetworkInterface {
    return FfiConverterTypeNetwork.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_network_regtest_default(
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public static testnet(): NetworkInterface {
    return FfiConverterTypeNetwork.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_network_testnet(
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public defaultElectrumClient(): ElectrumClientInterface /*throws*/ {
    return FfiConverterTypeElectrumClient.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_network_default_electrum_client(
            uniffiTypeNetworkObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public defaultEsploraClient(): EsploraClientInterface /*throws*/ {
    return FfiConverterTypeEsploraClient.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_network_default_esplora_client(
            uniffiTypeNetworkObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public isMainnet(): boolean {
    return FfiConverterBool.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_network_is_mainnet(
            uniffiTypeNetworkObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public policyAsset(): AssetId {
    return FfiConverterTypeAssetId.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_network_policy_asset(
            uniffiTypeNetworkObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public txBuilder(): TxBuilderInterface {
    return FfiConverterTypeTxBuilder.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_network_tx_builder(
            uniffiTypeNetworkObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Calls into the `NetworkInterface::to_string()` method of the native Rust peer.
   *
   * Generated by deriving the `Display` trait in Rust.
   */
  toString(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_network_uniffi_trait_display(
            uniffiTypeNetworkObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeNetworkObjectFactory.pointer(this);
      uniffiTypeNetworkObjectFactory.freePointer(pointer);
      uniffiTypeNetworkObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Network {
    return uniffiTypeNetworkObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeNetworkObjectFactory: UniffiObjectFactory<NetworkInterface> = {
  create(pointer: UnsafeMutableRawPointer): NetworkInterface {
    const instance = Object.create(Network.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'Network';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_network_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: NetworkInterface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: NetworkInterface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_network(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_network(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is NetworkInterface {
    return (
      obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Network'
    );
  },
};
// FfiConverter for NetworkInterface
const FfiConverterTypeNetwork = new FfiConverterObject(
  uniffiTypeNetworkObjectFactory
);

export interface OutPointInterface {
  txid(): TxidInterface;
  vout(): /*u32*/ number;
}

export class OutPoint
  extends UniffiAbstractObject
  implements OutPointInterface
{
  readonly [uniffiTypeNameSymbol] = 'OutPoint';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct an OutPoint object
   */
  constructor(s: string) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_outpoint_new(
          FfiConverterString.lower(s),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeOutPointObjectFactory.bless(pointer);
  }

  public txid(): TxidInterface {
    return FfiConverterTypeTxid.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_outpoint_txid(
            uniffiTypeOutPointObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public vout(): /*u32*/ number {
    return FfiConverterUInt32.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_outpoint_vout(
            uniffiTypeOutPointObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Calls into the `OutPointInterface::to_string()` method of the native Rust peer.
   *
   * Generated by deriving the `Display` trait in Rust.
   */
  toString(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_outpoint_uniffi_trait_display(
            uniffiTypeOutPointObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeOutPointObjectFactory.pointer(this);
      uniffiTypeOutPointObjectFactory.freePointer(pointer);
      uniffiTypeOutPointObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is OutPoint {
    return uniffiTypeOutPointObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeOutPointObjectFactory: UniffiObjectFactory<OutPointInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): OutPointInterface {
      const instance = Object.create(OutPoint.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'OutPoint';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_outpoint_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: OutPointInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: OutPointInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_outpoint(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_outpoint(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is OutPointInterface {
      return (
        obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'OutPoint'
      );
    },
  };
// FfiConverter for OutPointInterface
const FfiConverterTypeOutPoint = new FfiConverterObject(
  uniffiTypeOutPointObjectFactory
);

/**
 * Wrapper over [`lwk_common::Precision`]
 */
export interface PrecisionInterface {
  /**
   * See [`lwk_common::Precision::sats_to_string`]
   */
  satsToString(sats: /*i64*/ bigint): string;
  /**
   * See [`lwk_common::Precision::string_to_sats`]
   */
  stringToSats(val: string) /*throws*/ : /*i64*/ bigint;
}

/**
 * Wrapper over [`lwk_common::Precision`]
 */
export class Precision
  extends UniffiAbstractObject
  implements PrecisionInterface
{
  readonly [uniffiTypeNameSymbol] = 'Precision';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * See [`lwk_common::Precision::new`]
   */
  constructor(precision: /*u8*/ number) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_precision_new(
          FfiConverterUInt8.lower(precision),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypePrecisionObjectFactory.bless(pointer);
  }

  /**
   * See [`lwk_common::Precision::sats_to_string`]
   */
  public satsToString(sats: /*i64*/ bigint): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_precision_sats_to_string(
            uniffiTypePrecisionObjectFactory.clonePointer(this),
            FfiConverterInt64.lower(sats),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * See [`lwk_common::Precision::string_to_sats`]
   */
  public stringToSats(val: string): /*i64*/ bigint /*throws*/ {
    return FfiConverterInt64.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_precision_string_to_sats(
            uniffiTypePrecisionObjectFactory.clonePointer(this),
            FfiConverterString.lower(val),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypePrecisionObjectFactory.pointer(this);
      uniffiTypePrecisionObjectFactory.freePointer(pointer);
      uniffiTypePrecisionObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Precision {
    return uniffiTypePrecisionObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypePrecisionObjectFactory: UniffiObjectFactory<PrecisionInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): PrecisionInterface {
      const instance = Object.create(Precision.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'Precision';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_precision_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: PrecisionInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: PrecisionInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_precision(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_precision(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is PrecisionInterface {
      return (
        obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Precision'
      );
    },
  };
// FfiConverter for PrecisionInterface
const FfiConverterTypePrecision = new FfiConverterObject(
  uniffiTypePrecisionObjectFactory
);

/**
 * Partially Signed Elements Transaction, wrapper over [`elements::pset::PartiallySignedTransaction`]
 */
export interface PsetInterface {
  extractTx() /*throws*/ : TransactionInterface;
  /**
   * Finalize and extract the PSET
   */
  finalize() /*throws*/ : TransactionInterface;
  inputs(): Array<PsetInputInterface>;
}

/**
 * Partially Signed Elements Transaction, wrapper over [`elements::pset::PartiallySignedTransaction`]
 */
export class Pset extends UniffiAbstractObject implements PsetInterface {
  readonly [uniffiTypeNameSymbol] = 'Pset';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct a Watch-Only wallet object
   */
  constructor(base64: string) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_pset_new(
          FfiConverterString.lower(base64),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypePsetObjectFactory.bless(pointer);
  }

  public extractTx(): TransactionInterface /*throws*/ {
    return FfiConverterTypeTransaction.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_pset_extract_tx(
            uniffiTypePsetObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Finalize and extract the PSET
   */
  public finalize(): TransactionInterface /*throws*/ {
    return FfiConverterTypeTransaction.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_pset_finalize(
            uniffiTypePsetObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public inputs(): Array<PsetInputInterface> {
    return FfiConverterArrayTypePsetInput.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_pset_inputs(
            uniffiTypePsetObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Calls into the `PsetInterface::to_string()` method of the native Rust peer.
   *
   * Generated by deriving the `Display` trait in Rust.
   */
  toString(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_pset_uniffi_trait_display(
            uniffiTypePsetObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypePsetObjectFactory.pointer(this);
      uniffiTypePsetObjectFactory.freePointer(pointer);
      uniffiTypePsetObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Pset {
    return uniffiTypePsetObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypePsetObjectFactory: UniffiObjectFactory<PsetInterface> = {
  create(pointer: UnsafeMutableRawPointer): PsetInterface {
    const instance = Object.create(Pset.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'Pset';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_pset_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: PsetInterface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: PsetInterface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_pset(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_pset(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is PsetInterface {
    return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Pset';
  },
};
// FfiConverter for PsetInterface
const FfiConverterTypePset = new FfiConverterObject(
  uniffiTypePsetObjectFactory
);

export interface PsetBalanceInterface {
  balances(): Map<AssetId, /*i64*/ bigint>;
  fee(): /*u64*/ bigint;
  recipients(): Array<RecipientInterface>;
}

export class PsetBalance
  extends UniffiAbstractObject
  implements PsetBalanceInterface
{
  readonly [uniffiTypeNameSymbol] = 'PsetBalance';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypePsetBalanceObjectFactory.bless(pointer);
  }

  public balances(): Map<AssetId, /*i64*/ bigint> {
    return FfiConverterMapTypeAssetIdInt64.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetbalance_balances(
            uniffiTypePsetBalanceObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public fee(): /*u64*/ bigint {
    return FfiConverterUInt64.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetbalance_fee(
            uniffiTypePsetBalanceObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public recipients(): Array<RecipientInterface> {
    return FfiConverterArrayTypeRecipient.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetbalance_recipients(
            uniffiTypePsetBalanceObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypePsetBalanceObjectFactory.pointer(this);
      uniffiTypePsetBalanceObjectFactory.freePointer(pointer);
      uniffiTypePsetBalanceObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is PsetBalance {
    return uniffiTypePsetBalanceObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypePsetBalanceObjectFactory: UniffiObjectFactory<PsetBalanceInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): PsetBalanceInterface {
      const instance = Object.create(PsetBalance.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'PsetBalance';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_psetbalance_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: PsetBalanceInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: PsetBalanceInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_psetbalance(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_psetbalance(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is PsetBalanceInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'PsetBalance'
      );
    },
  };
// FfiConverter for PsetBalanceInterface
const FfiConverterTypePsetBalance = new FfiConverterObject(
  uniffiTypePsetBalanceObjectFactory
);

export interface PsetDetailsInterface {
  balance(): PsetBalanceInterface;
  inputsIssuances(): Array<IssuanceInterface>;
  signatures(): Array<PsetSignaturesInterface>;
}

export class PsetDetails
  extends UniffiAbstractObject
  implements PsetDetailsInterface
{
  readonly [uniffiTypeNameSymbol] = 'PsetDetails';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypePsetDetailsObjectFactory.bless(pointer);
  }

  public balance(): PsetBalanceInterface {
    return FfiConverterTypePsetBalance.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetdetails_balance(
            uniffiTypePsetDetailsObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public inputsIssuances(): Array<IssuanceInterface> {
    return FfiConverterArrayTypeIssuance.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetdetails_inputs_issuances(
            uniffiTypePsetDetailsObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public signatures(): Array<PsetSignaturesInterface> {
    return FfiConverterArrayTypePsetSignatures.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetdetails_signatures(
            uniffiTypePsetDetailsObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypePsetDetailsObjectFactory.pointer(this);
      uniffiTypePsetDetailsObjectFactory.freePointer(pointer);
      uniffiTypePsetDetailsObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is PsetDetails {
    return uniffiTypePsetDetailsObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypePsetDetailsObjectFactory: UniffiObjectFactory<PsetDetailsInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): PsetDetailsInterface {
      const instance = Object.create(PsetDetails.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'PsetDetails';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_psetdetails_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: PsetDetailsInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: PsetDetailsInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_psetdetails(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_psetdetails(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is PsetDetailsInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'PsetDetails'
      );
    },
  };
// FfiConverter for PsetDetailsInterface
const FfiConverterTypePsetDetails = new FfiConverterObject(
  uniffiTypePsetDetailsObjectFactory
);

/**
 * PSET input
 */
export interface PsetInputInterface {
  /**
   * If the input has an issuance, the asset id
   */
  issuanceAsset(): AssetId | undefined;
  /**
   * If the input has an issuance, the token id
   */
  issuanceToken(): AssetId | undefined;
  /**
   * Prevout scriptpubkey of the input
   */
  previousScriptPubkey(): ScriptInterface | undefined;
  /**
   * Prevout TXID of the input
   */
  previousTxid(): TxidInterface;
  /**
   * Prevout vout of the input
   */
  previousVout(): /*u32*/ number;
  /**
   * Redeem script of the input
   */
  redeemScript(): ScriptInterface | undefined;
}

/**
 * PSET input
 */
export class PsetInput
  extends UniffiAbstractObject
  implements PsetInputInterface
{
  readonly [uniffiTypeNameSymbol] = 'PsetInput';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypePsetInputObjectFactory.bless(pointer);
  }

  /**
   * If the input has an issuance, the asset id
   */
  public issuanceAsset(): AssetId | undefined {
    return FfiConverterOptionalTypeAssetId.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetinput_issuance_asset(
            uniffiTypePsetInputObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * If the input has an issuance, the token id
   */
  public issuanceToken(): AssetId | undefined {
    return FfiConverterOptionalTypeAssetId.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetinput_issuance_token(
            uniffiTypePsetInputObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Prevout scriptpubkey of the input
   */
  public previousScriptPubkey(): ScriptInterface | undefined {
    return FfiConverterOptionalTypeScript.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetinput_previous_script_pubkey(
            uniffiTypePsetInputObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Prevout TXID of the input
   */
  public previousTxid(): TxidInterface {
    return FfiConverterTypeTxid.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetinput_previous_txid(
            uniffiTypePsetInputObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Prevout vout of the input
   */
  public previousVout(): /*u32*/ number {
    return FfiConverterUInt32.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetinput_previous_vout(
            uniffiTypePsetInputObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Redeem script of the input
   */
  public redeemScript(): ScriptInterface | undefined {
    return FfiConverterOptionalTypeScript.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetinput_redeem_script(
            uniffiTypePsetInputObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypePsetInputObjectFactory.pointer(this);
      uniffiTypePsetInputObjectFactory.freePointer(pointer);
      uniffiTypePsetInputObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is PsetInput {
    return uniffiTypePsetInputObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypePsetInputObjectFactory: UniffiObjectFactory<PsetInputInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): PsetInputInterface {
      const instance = Object.create(PsetInput.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'PsetInput';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_psetinput_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: PsetInputInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: PsetInputInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_psetinput(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_psetinput(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is PsetInputInterface {
      return (
        obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'PsetInput'
      );
    },
  };
// FfiConverter for PsetInputInterface
const FfiConverterTypePsetInput = new FfiConverterObject(
  uniffiTypePsetInputObjectFactory
);

export interface PsetSignaturesInterface {
  hasSignature(): Map<string, string>;
  missingSignature(): Map<string, string>;
}

export class PsetSignatures
  extends UniffiAbstractObject
  implements PsetSignaturesInterface
{
  readonly [uniffiTypeNameSymbol] = 'PsetSignatures';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypePsetSignaturesObjectFactory.bless(pointer);
  }

  public hasSignature(): Map<string, string> {
    return FfiConverterMapStringString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetsignatures_has_signature(
            uniffiTypePsetSignaturesObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public missingSignature(): Map<string, string> {
    return FfiConverterMapStringString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_psetsignatures_missing_signature(
            uniffiTypePsetSignaturesObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypePsetSignaturesObjectFactory.pointer(this);
      uniffiTypePsetSignaturesObjectFactory.freePointer(pointer);
      uniffiTypePsetSignaturesObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is PsetSignatures {
    return uniffiTypePsetSignaturesObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypePsetSignaturesObjectFactory: UniffiObjectFactory<PsetSignaturesInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): PsetSignaturesInterface {
      const instance = Object.create(PsetSignatures.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'PsetSignatures';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_psetsignatures_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: PsetSignaturesInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: PsetSignaturesInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_psetsignatures(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_psetsignatures(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is PsetSignaturesInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'PsetSignatures'
      );
    },
  };
// FfiConverter for PsetSignaturesInterface
const FfiConverterTypePsetSignatures = new FfiConverterObject(
  uniffiTypePsetSignaturesObjectFactory
);

export interface RecipientInterface {
  address(): AddressInterface | undefined;
  asset(): AssetId | undefined;
  value(): /*u64*/ bigint | undefined;
  vout(): /*u32*/ number;
}

export class Recipient
  extends UniffiAbstractObject
  implements RecipientInterface
{
  readonly [uniffiTypeNameSymbol] = 'Recipient';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeRecipientObjectFactory.bless(pointer);
  }

  public address(): AddressInterface | undefined {
    return FfiConverterOptionalTypeAddress.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_recipient_address(
            uniffiTypeRecipientObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public asset(): AssetId | undefined {
    return FfiConverterOptionalTypeAssetId.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_recipient_asset(
            uniffiTypeRecipientObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public value(): /*u64*/ bigint | undefined {
    return FfiConverterOptionalUInt64.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_recipient_value(
            uniffiTypeRecipientObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public vout(): /*u32*/ number {
    return FfiConverterUInt32.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_recipient_vout(
            uniffiTypeRecipientObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeRecipientObjectFactory.pointer(this);
      uniffiTypeRecipientObjectFactory.freePointer(pointer);
      uniffiTypeRecipientObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Recipient {
    return uniffiTypeRecipientObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeRecipientObjectFactory: UniffiObjectFactory<RecipientInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): RecipientInterface {
      const instance = Object.create(Recipient.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'Recipient';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_recipient_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: RecipientInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: RecipientInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_recipient(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_recipient(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is RecipientInterface {
      return (
        obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Recipient'
      );
    },
  };
// FfiConverter for RecipientInterface
const FfiConverterTypeRecipient = new FfiConverterObject(
  uniffiTypeRecipientObjectFactory
);

export interface ScriptInterface {
  asm(): string;
  bytes(): ArrayBuffer;
}

export class Script extends UniffiAbstractObject implements ScriptInterface {
  readonly [uniffiTypeNameSymbol] = 'Script';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct a Script object
   */
  constructor(hex: Hex) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_script_new(
          FfiConverterTypeHex.lower(hex),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeScriptObjectFactory.bless(pointer);
  }

  public asm(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_script_asm(
            uniffiTypeScriptObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public bytes(): ArrayBuffer {
    return FfiConverterArrayBuffer.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_script_bytes(
            uniffiTypeScriptObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Calls into the `ScriptInterface::to_string()` method of the native Rust peer.
   *
   * Generated by deriving the `Display` trait in Rust.
   */
  toString(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_script_uniffi_trait_display(
            uniffiTypeScriptObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeScriptObjectFactory.pointer(this);
      uniffiTypeScriptObjectFactory.freePointer(pointer);
      uniffiTypeScriptObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Script {
    return uniffiTypeScriptObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeScriptObjectFactory: UniffiObjectFactory<ScriptInterface> = {
  create(pointer: UnsafeMutableRawPointer): ScriptInterface {
    const instance = Object.create(Script.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'Script';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_script_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: ScriptInterface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: ScriptInterface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_script(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_script(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is ScriptInterface {
    return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Script';
  },
};
// FfiConverter for ScriptInterface
const FfiConverterTypeScript = new FfiConverterObject(
  uniffiTypeScriptObjectFactory
);

/**
 * A secret key
 */
export interface SecretKeyInterface {
  bytes(): ArrayBuffer;
}

/**
 * A secret key
 */
export class SecretKey
  extends UniffiAbstractObject
  implements SecretKeyInterface
{
  readonly [uniffiTypeNameSymbol] = 'SecretKey';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeSecretKeyObjectFactory.bless(pointer);
  }

  public static fromBytes(bytes: ArrayBuffer): SecretKeyInterface /*throws*/ {
    return FfiConverterTypeSecretKey.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_secretkey_from_bytes(
            FfiConverterArrayBuffer.lower(bytes),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public bytes(): ArrayBuffer {
    return FfiConverterArrayBuffer.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_secretkey_bytes(
            uniffiTypeSecretKeyObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeSecretKeyObjectFactory.pointer(this);
      uniffiTypeSecretKeyObjectFactory.freePointer(pointer);
      uniffiTypeSecretKeyObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is SecretKey {
    return uniffiTypeSecretKeyObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeSecretKeyObjectFactory: UniffiObjectFactory<SecretKeyInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): SecretKeyInterface {
      const instance = Object.create(SecretKey.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'SecretKey';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_secretkey_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: SecretKeyInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: SecretKeyInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_secretkey(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_secretkey(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is SecretKeyInterface {
      return (
        obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'SecretKey'
      );
    },
  };
// FfiConverter for SecretKeyInterface
const FfiConverterTypeSecretKey = new FfiConverterObject(
  uniffiTypeSecretKeyObjectFactory
);

/**
 * A Software signer, wrapper over [`lwk_signer::SwSigner`]
 */
export interface SignerInterface {
  keyoriginXpub(bip: BipInterface) /*throws*/ : string;
  mnemonic() /*throws*/ : MnemonicInterface;
  /**
   * Sign the given `pset`
   *
   * Note from an API perspective it would be better to consume the `pset` parameter so it would
   * be clear the signed PSET is the returned one, but it's not possible with uniffi bindings
   */
  sign(pset: PsetInterface) /*throws*/ : PsetInterface;
  wpkhSlip77Descriptor() /*throws*/ : WolletDescriptorInterface;
}

/**
 * A Software signer, wrapper over [`lwk_signer::SwSigner`]
 */
export class Signer extends UniffiAbstractObject implements SignerInterface {
  readonly [uniffiTypeNameSymbol] = 'Signer';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct a software signer
   */
  constructor(
    mnemonic: MnemonicInterface,
    network: NetworkInterface
  ) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_signer_new(
          FfiConverterTypeMnemonic.lower(mnemonic),
          FfiConverterTypeNetwork.lower(network),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeSignerObjectFactory.bless(pointer);
  }

  /**
   * Generate a new random software signer
   */
  public static random(network: NetworkInterface): SignerInterface /*throws*/ {
    return FfiConverterTypeSigner.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_signer_random(
            FfiConverterTypeNetwork.lower(network),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public keyoriginXpub(bip: BipInterface): string /*throws*/ {
    return FfiConverterString.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_signer_keyorigin_xpub(
            uniffiTypeSignerObjectFactory.clonePointer(this),
            FfiConverterTypeBip.lower(bip),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public mnemonic(): MnemonicInterface /*throws*/ {
    return FfiConverterTypeMnemonic.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_signer_mnemonic(
            uniffiTypeSignerObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Sign the given `pset`
   *
   * Note from an API perspective it would be better to consume the `pset` parameter so it would
   * be clear the signed PSET is the returned one, but it's not possible with uniffi bindings
   */
  public sign(pset: PsetInterface): PsetInterface /*throws*/ {
    return FfiConverterTypePset.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_signer_sign(
            uniffiTypeSignerObjectFactory.clonePointer(this),
            FfiConverterTypePset.lower(pset),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public wpkhSlip77Descriptor(): WolletDescriptorInterface /*throws*/ {
    return FfiConverterTypeWolletDescriptor.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_signer_wpkh_slip77_descriptor(
            uniffiTypeSignerObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeSignerObjectFactory.pointer(this);
      uniffiTypeSignerObjectFactory.freePointer(pointer);
      uniffiTypeSignerObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Signer {
    return uniffiTypeSignerObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeSignerObjectFactory: UniffiObjectFactory<SignerInterface> = {
  create(pointer: UnsafeMutableRawPointer): SignerInterface {
    const instance = Object.create(Signer.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'Signer';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_signer_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: SignerInterface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: SignerInterface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_signer(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_signer(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is SignerInterface {
    return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Signer';
  },
};
// FfiConverter for SignerInterface
const FfiConverterTypeSigner = new FfiConverterObject(
  uniffiTypeSignerObjectFactory
);

/**
 * Represent a test environment with an elements node and an electrum server.
 * useful for testing only, wrapper over [`lwk_test_util::TestElectrumServer`]
 */
export interface TestEnvInterface {
  electrumUrl(): string;
  generate(blocks: /*u32*/ number): void;
  getNewAddress(): AddressInterface;
  height(): /*u64*/ bigint;
  issueAsset(satoshi: /*u64*/ bigint): AssetId;
  sendToAddress(
    address: AddressInterface,
    satoshi: /*u64*/ bigint,
    asset: AssetId | undefined
  ): TxidInterface;
}

/**
 * Represent a test environment with an elements node and an electrum server.
 * useful for testing only, wrapper over [`lwk_test_util::TestElectrumServer`]
 */
export class TestEnv extends UniffiAbstractObject implements TestEnvInterface {
  readonly [uniffiTypeNameSymbol] = 'TestEnv';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  constructor() {
    super();
    const pointer = uniffiCaller.rustCall(
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_testenv_new(
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeTestEnvObjectFactory.bless(pointer);
  }

  public electrumUrl(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_testenv_electrum_url(
            uniffiTypeTestEnvObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public generate(blocks: /*u32*/ number): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_testenv_generate(
          uniffiTypeTestEnvObjectFactory.clonePointer(this),
          FfiConverterUInt32.lower(blocks),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  public getNewAddress(): AddressInterface {
    return FfiConverterTypeAddress.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_testenv_get_new_address(
            uniffiTypeTestEnvObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public height(): /*u64*/ bigint {
    return FfiConverterUInt64.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_testenv_height(
            uniffiTypeTestEnvObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public issueAsset(satoshi: /*u64*/ bigint): AssetId {
    return FfiConverterTypeAssetId.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_testenv_issue_asset(
            uniffiTypeTestEnvObjectFactory.clonePointer(this),
            FfiConverterUInt64.lower(satoshi),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public sendToAddress(
    address: AddressInterface,
    satoshi: /*u64*/ bigint,
    asset: AssetId | undefined
  ): TxidInterface {
    return FfiConverterTypeTxid.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_testenv_send_to_address(
            uniffiTypeTestEnvObjectFactory.clonePointer(this),
            FfiConverterTypeAddress.lower(address),
            FfiConverterUInt64.lower(satoshi),
            FfiConverterOptionalTypeAssetId.lower(asset),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeTestEnvObjectFactory.pointer(this);
      uniffiTypeTestEnvObjectFactory.freePointer(pointer);
      uniffiTypeTestEnvObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is TestEnv {
    return uniffiTypeTestEnvObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeTestEnvObjectFactory: UniffiObjectFactory<TestEnvInterface> = {
  create(pointer: UnsafeMutableRawPointer): TestEnvInterface {
    const instance = Object.create(TestEnv.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'TestEnv';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_testenv_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: TestEnvInterface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: TestEnvInterface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_testenv(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_testenv(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is TestEnvInterface {
    return (
      obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'TestEnv'
    );
  },
};
// FfiConverter for TestEnvInterface
const FfiConverterTypeTestEnv = new FfiConverterObject(
  uniffiTypeTestEnvObjectFactory
);

export interface TransactionInterface {
  bytes(): ArrayBuffer;
  fee(policyAsset: AssetId): /*u64*/ bigint;
  inputs(): Array<TxInInterface>;
  outputs(): Array<TxOutInterface>;
  txid(): TxidInterface;
}

export class Transaction
  extends UniffiAbstractObject
  implements TransactionInterface
{
  readonly [uniffiTypeNameSymbol] = 'Transaction';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct a Transaction object
   */
  constructor(hex: Hex) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_transaction_new(
          FfiConverterTypeHex.lower(hex),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeTransactionObjectFactory.bless(pointer);
  }

  public bytes(): ArrayBuffer {
    return FfiConverterArrayBuffer.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_transaction_bytes(
            uniffiTypeTransactionObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public fee(policyAsset: AssetId): /*u64*/ bigint {
    return FfiConverterUInt64.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_transaction_fee(
            uniffiTypeTransactionObjectFactory.clonePointer(this),
            FfiConverterTypeAssetId.lower(policyAsset),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public inputs(): Array<TxInInterface> {
    return FfiConverterArrayTypeTxIn.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_transaction_inputs(
            uniffiTypeTransactionObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public outputs(): Array<TxOutInterface> {
    return FfiConverterArrayTypeTxOut.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_transaction_outputs(
            uniffiTypeTransactionObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public txid(): TxidInterface {
    return FfiConverterTypeTxid.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_transaction_txid(
            uniffiTypeTransactionObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Calls into the `TransactionInterface::to_string()` method of the native Rust peer.
   *
   * Generated by deriving the `Display` trait in Rust.
   */
  toString(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_transaction_uniffi_trait_display(
            uniffiTypeTransactionObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeTransactionObjectFactory.pointer(this);
      uniffiTypeTransactionObjectFactory.freePointer(pointer);
      uniffiTypeTransactionObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Transaction {
    return uniffiTypeTransactionObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeTransactionObjectFactory: UniffiObjectFactory<TransactionInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): TransactionInterface {
      const instance = Object.create(Transaction.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'Transaction';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_transaction_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: TransactionInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: TransactionInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_transaction(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_transaction(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is TransactionInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'Transaction'
      );
    },
  };
// FfiConverter for TransactionInterface
const FfiConverterTypeTransaction = new FfiConverterObject(
  uniffiTypeTransactionObjectFactory
);

/**
 * Wrapper over [`lwk_wollet::TxBuilder`]
 */
export interface TxBuilderInterface {
  /**
   * Burn satoshi units of the given asset
   */
  addBurn(satoshi: /*u64*/ bigint, asset: AssetId) /*throws*/ : void;
  /**
   * Add a recipient receiving L-BTC
   */
  addLbtcRecipient(
    address: AddressInterface,
    satoshi: /*u64*/ bigint
  ) /*throws*/ : void;
  /**
   * Add a recipient receiving the given asset
   */
  addRecipient(
    address: AddressInterface,
    satoshi: /*u64*/ bigint,
    asset: AssetId
  ) /*throws*/ : void;
  /**
   * Sets the address to drain excess L-BTC to
   */
  drainLbtcTo(address: AddressInterface) /*throws*/ : void;
  /**
   * Select all available L-BTC inputs
   */
  drainLbtcWallet() /*throws*/ : void;
  /**
   * Set the fee rate
   */
  feeRate(rate: /*f32*/ number | undefined) /*throws*/ : void;
  /**
   * Build the transaction
   */
  finish(wollet: WolletInterface) /*throws*/ : PsetInterface;
  /**
   * Issue an asset, wrapper of [`lwk_wollet::TxBuilder::issue_asset()`]
   */
  issueAsset(
    assetSats: /*u64*/ bigint,
    assetReceiver: AddressInterface | undefined,
    tokenSats: /*u64*/ bigint,
    tokenReceiver: AddressInterface | undefined,
    contract: ContractInterface | undefined
  ) /*throws*/ : void;
  /**
   * Reissue an asset, wrapper of [`lwk_wollet::TxBuilder::reissue_asset()`]
   */
  reissueAsset(
    assetToReissue: AssetId,
    satoshiToReissue: /*u64*/ bigint,
    assetReceiver: AddressInterface | undefined,
    issuanceTx: TransactionInterface | undefined
  ) /*throws*/ : void;
  /**
   * Manual coin selection, wrapper of [`lwk_wollet::TxBuilder::set_wallet_utxos()`]
   */
  setWalletUtxos(utxos: Array<OutPointInterface>) /*throws*/ : void;
}

/**
 * Wrapper over [`lwk_wollet::TxBuilder`]
 */
export class TxBuilder
  extends UniffiAbstractObject
  implements TxBuilderInterface
{
  readonly [uniffiTypeNameSymbol] = 'TxBuilder';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct a transaction builder
   */
  constructor(network: NetworkInterface) {
    super();
    const pointer = uniffiCaller.rustCall(
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_txbuilder_new(
          FfiConverterTypeNetwork.lower(network),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeTxBuilderObjectFactory.bless(pointer);
  }

  /**
   * Burn satoshi units of the given asset
   */
  public addBurn(satoshi: /*u64*/ bigint, asset: AssetId): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_txbuilder_add_burn(
          uniffiTypeTxBuilderObjectFactory.clonePointer(this),
          FfiConverterUInt64.lower(satoshi),
          FfiConverterTypeAssetId.lower(asset),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  /**
   * Add a recipient receiving L-BTC
   */
  public addLbtcRecipient(
    address: AddressInterface,
    satoshi: /*u64*/ bigint
  ): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_txbuilder_add_lbtc_recipient(
          uniffiTypeTxBuilderObjectFactory.clonePointer(this),
          FfiConverterTypeAddress.lower(address),
          FfiConverterUInt64.lower(satoshi),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  /**
   * Add a recipient receiving the given asset
   */
  public addRecipient(
    address: AddressInterface,
    satoshi: /*u64*/ bigint,
    asset: AssetId
  ): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_txbuilder_add_recipient(
          uniffiTypeTxBuilderObjectFactory.clonePointer(this),
          FfiConverterTypeAddress.lower(address),
          FfiConverterUInt64.lower(satoshi),
          FfiConverterTypeAssetId.lower(asset),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  /**
   * Sets the address to drain excess L-BTC to
   */
  public drainLbtcTo(address: AddressInterface): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_txbuilder_drain_lbtc_to(
          uniffiTypeTxBuilderObjectFactory.clonePointer(this),
          FfiConverterTypeAddress.lower(address),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  /**
   * Select all available L-BTC inputs
   */
  public drainLbtcWallet(): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_txbuilder_drain_lbtc_wallet(
          uniffiTypeTxBuilderObjectFactory.clonePointer(this),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  /**
   * Set the fee rate
   */
  public feeRate(rate: /*f32*/ number | undefined): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_txbuilder_fee_rate(
          uniffiTypeTxBuilderObjectFactory.clonePointer(this),
          FfiConverterOptionalFloat32.lower(rate),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  /**
   * Build the transaction
   */
  public finish(wollet: WolletInterface): PsetInterface /*throws*/ {
    return FfiConverterTypePset.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txbuilder_finish(
            uniffiTypeTxBuilderObjectFactory.clonePointer(this),
            FfiConverterTypeWollet.lower(wollet),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Issue an asset, wrapper of [`lwk_wollet::TxBuilder::issue_asset()`]
   */
  public issueAsset(
    assetSats: /*u64*/ bigint,
    assetReceiver: AddressInterface | undefined,
    tokenSats: /*u64*/ bigint,
    tokenReceiver: AddressInterface | undefined,
    contract: ContractInterface | undefined
  ): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_txbuilder_issue_asset(
          uniffiTypeTxBuilderObjectFactory.clonePointer(this),
          FfiConverterUInt64.lower(assetSats),
          FfiConverterOptionalTypeAddress.lower(assetReceiver),
          FfiConverterUInt64.lower(tokenSats),
          FfiConverterOptionalTypeAddress.lower(tokenReceiver),
          FfiConverterOptionalTypeContract.lower(contract),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  /**
   * Reissue an asset, wrapper of [`lwk_wollet::TxBuilder::reissue_asset()`]
   */
  public reissueAsset(
    assetToReissue: AssetId,
    satoshiToReissue: /*u64*/ bigint,
    assetReceiver: AddressInterface | undefined,
    issuanceTx: TransactionInterface | undefined
  ): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_txbuilder_reissue_asset(
          uniffiTypeTxBuilderObjectFactory.clonePointer(this),
          FfiConverterTypeAssetId.lower(assetToReissue),
          FfiConverterUInt64.lower(satoshiToReissue),
          FfiConverterOptionalTypeAddress.lower(assetReceiver),
          FfiConverterOptionalTypeTransaction.lower(issuanceTx),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  /**
   * Manual coin selection, wrapper of [`lwk_wollet::TxBuilder::set_wallet_utxos()`]
   */
  public setWalletUtxos(utxos: Array<OutPointInterface>): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_txbuilder_set_wallet_utxos(
          uniffiTypeTxBuilderObjectFactory.clonePointer(this),
          FfiConverterArrayTypeOutPoint.lower(utxos),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  /**
   * Calls into the `TxBuilderInterface::to_string()` method of the native Rust peer.
   *
   * Generated by deriving the `Display` trait in Rust.
   */
  toString(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txbuilder_uniffi_trait_display(
            uniffiTypeTxBuilderObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeTxBuilderObjectFactory.pointer(this);
      uniffiTypeTxBuilderObjectFactory.freePointer(pointer);
      uniffiTypeTxBuilderObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is TxBuilder {
    return uniffiTypeTxBuilderObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeTxBuilderObjectFactory: UniffiObjectFactory<TxBuilderInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): TxBuilderInterface {
      const instance = Object.create(TxBuilder.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'TxBuilder';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_txbuilder_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: TxBuilderInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: TxBuilderInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_txbuilder(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_txbuilder(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is TxBuilderInterface {
      return (
        obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'TxBuilder'
      );
    },
  };
// FfiConverter for TxBuilderInterface
const FfiConverterTypeTxBuilder = new FfiConverterObject(
  uniffiTypeTxBuilderObjectFactory
);

export interface TxInInterface {
  /**
   * Outpoint
   */
  outpoint(): OutPointInterface;
}

export class TxIn extends UniffiAbstractObject implements TxInInterface {
  readonly [uniffiTypeNameSymbol] = 'TxIn';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeTxInObjectFactory.bless(pointer);
  }

  /**
   * Outpoint
   */
  public outpoint(): OutPointInterface {
    return FfiConverterTypeOutPoint.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txin_outpoint(
            uniffiTypeTxInObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeTxInObjectFactory.pointer(this);
      uniffiTypeTxInObjectFactory.freePointer(pointer);
      uniffiTypeTxInObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is TxIn {
    return uniffiTypeTxInObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeTxInObjectFactory: UniffiObjectFactory<TxInInterface> = {
  create(pointer: UnsafeMutableRawPointer): TxInInterface {
    const instance = Object.create(TxIn.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'TxIn';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_txin_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: TxInInterface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: TxInInterface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_txin(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_txin(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is TxInInterface {
    return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'TxIn';
  },
};
// FfiConverter for TxInInterface
const FfiConverterTypeTxIn = new FfiConverterObject(
  uniffiTypeTxInObjectFactory
);

export interface TxOutInterface {
  /**
   * If explicit returns the asset, if confidential [None]
   */
  asset(): AssetId | undefined;
  /**
   * Whether or not this output is a fee output
   */
  isFee(): boolean;
  /**
   * Returns if at least some part of this output are blinded
   */
  isPartiallyBlinded(): boolean;
  /**
   * Scriptpubkey
   */
  scriptPubkey(): ScriptInterface;
  /**
   * Unblind the output
   */
  unblind(secretKey: SecretKeyInterface) /*throws*/ : TxOutSecretsInterface;
  /**
   * If explicit returns the value, if confidential [None]
   */
  value(): /*u64*/ bigint | undefined;
}

export class TxOut extends UniffiAbstractObject implements TxOutInterface {
  readonly [uniffiTypeNameSymbol] = 'TxOut';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeTxOutObjectFactory.bless(pointer);
  }

  /**
   * If explicit returns the asset, if confidential [None]
   */
  public asset(): AssetId | undefined {
    return FfiConverterOptionalTypeAssetId.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txout_asset(
            uniffiTypeTxOutObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Whether or not this output is a fee output
   */
  public isFee(): boolean {
    return FfiConverterBool.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txout_is_fee(
            uniffiTypeTxOutObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Returns if at least some part of this output are blinded
   */
  public isPartiallyBlinded(): boolean {
    return FfiConverterBool.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txout_is_partially_blinded(
            uniffiTypeTxOutObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Scriptpubkey
   */
  public scriptPubkey(): ScriptInterface {
    return FfiConverterTypeScript.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txout_script_pubkey(
            uniffiTypeTxOutObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Unblind the output
   */
  public unblind(
    secretKey: SecretKeyInterface
  ): TxOutSecretsInterface /*throws*/ {
    return FfiConverterTypeTxOutSecrets.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txout_unblind(
            uniffiTypeTxOutObjectFactory.clonePointer(this),
            FfiConverterTypeSecretKey.lower(secretKey),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * If explicit returns the value, if confidential [None]
   */
  public value(): /*u64*/ bigint | undefined {
    return FfiConverterOptionalUInt64.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txout_value(
            uniffiTypeTxOutObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeTxOutObjectFactory.pointer(this);
      uniffiTypeTxOutObjectFactory.freePointer(pointer);
      uniffiTypeTxOutObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is TxOut {
    return uniffiTypeTxOutObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeTxOutObjectFactory: UniffiObjectFactory<TxOutInterface> = {
  create(pointer: UnsafeMutableRawPointer): TxOutInterface {
    const instance = Object.create(TxOut.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'TxOut';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_txout_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: TxOutInterface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: TxOutInterface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_txout(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_txout(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is TxOutInterface {
    return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'TxOut';
  },
};
// FfiConverter for TxOutInterface
const FfiConverterTypeTxOut = new FfiConverterObject(
  uniffiTypeTxOutObjectFactory
);

export interface TxOutSecretsInterface {
  asset(): AssetId;
  assetBf(): Hex;
  value(): /*u64*/ bigint;
  valueBf(): Hex;
}

export class TxOutSecrets
  extends UniffiAbstractObject
  implements TxOutSecretsInterface
{
  readonly [uniffiTypeNameSymbol] = 'TxOutSecrets';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeTxOutSecretsObjectFactory.bless(pointer);
  }

  public asset(): AssetId {
    return FfiConverterTypeAssetId.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txoutsecrets_asset(
            uniffiTypeTxOutSecretsObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public assetBf(): Hex {
    return FfiConverterTypeHex.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txoutsecrets_asset_bf(
            uniffiTypeTxOutSecretsObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public value(): /*u64*/ bigint {
    return FfiConverterUInt64.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txoutsecrets_value(
            uniffiTypeTxOutSecretsObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public valueBf(): Hex {
    return FfiConverterTypeHex.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txoutsecrets_value_bf(
            uniffiTypeTxOutSecretsObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeTxOutSecretsObjectFactory.pointer(this);
      uniffiTypeTxOutSecretsObjectFactory.freePointer(pointer);
      uniffiTypeTxOutSecretsObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is TxOutSecrets {
    return uniffiTypeTxOutSecretsObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeTxOutSecretsObjectFactory: UniffiObjectFactory<TxOutSecretsInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): TxOutSecretsInterface {
      const instance = Object.create(TxOutSecrets.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'TxOutSecrets';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_txoutsecrets_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: TxOutSecretsInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: TxOutSecretsInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_txoutsecrets(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_txoutsecrets(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is TxOutSecretsInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'TxOutSecrets'
      );
    },
  };
// FfiConverter for TxOutSecretsInterface
const FfiConverterTypeTxOutSecrets = new FfiConverterObject(
  uniffiTypeTxOutSecretsObjectFactory
);

export interface TxidInterface {
  bytes(): ArrayBuffer;
}

export class Txid extends UniffiAbstractObject implements TxidInterface {
  readonly [uniffiTypeNameSymbol] = 'Txid';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct a Txid object
   */
  constructor(hex: Hex) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_txid_new(
          FfiConverterTypeHex.lower(hex),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeTxidObjectFactory.bless(pointer);
  }

  public bytes(): ArrayBuffer {
    return FfiConverterArrayBuffer.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txid_bytes(
            uniffiTypeTxidObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Calls into the `TxidInterface::to_string()` method of the native Rust peer.
   *
   * Generated by deriving the `Display` trait in Rust.
   */
  toString(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_txid_uniffi_trait_display(
            uniffiTypeTxidObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeTxidObjectFactory.pointer(this);
      uniffiTypeTxidObjectFactory.freePointer(pointer);
      uniffiTypeTxidObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Txid {
    return uniffiTypeTxidObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeTxidObjectFactory: UniffiObjectFactory<TxidInterface> = {
  create(pointer: UnsafeMutableRawPointer): TxidInterface {
    const instance = Object.create(Txid.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'Txid';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_txid_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: TxidInterface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: TxidInterface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_txid(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_txid(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is TxidInterface {
    return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Txid';
  },
};
// FfiConverter for TxidInterface
const FfiConverterTypeTxid = new FfiConverterObject(
  uniffiTypeTxidObjectFactory
);

/**
 * Wrapper over [`lwk_wollet::Update`]
 */
export interface UpdateInterface {
  /**
   * Whether the update only changes the tip (does not affect transactions)
   */
  onlyTip(): boolean;
  serialize() /*throws*/ : ArrayBuffer;
}

/**
 * Wrapper over [`lwk_wollet::Update`]
 */
export class Update extends UniffiAbstractObject implements UpdateInterface {
  readonly [uniffiTypeNameSymbol] = 'Update';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  constructor(bytes: ArrayBuffer) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_update_new(
          FfiConverterArrayBuffer.lower(bytes),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeUpdateObjectFactory.bless(pointer);
  }

  /**
   * Whether the update only changes the tip (does not affect transactions)
   */
  public onlyTip(): boolean {
    return FfiConverterBool.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_update_only_tip(
            uniffiTypeUpdateObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public serialize(): ArrayBuffer /*throws*/ {
    return FfiConverterArrayBuffer.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_update_serialize(
            uniffiTypeUpdateObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeUpdateObjectFactory.pointer(this);
      uniffiTypeUpdateObjectFactory.freePointer(pointer);
      uniffiTypeUpdateObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Update {
    return uniffiTypeUpdateObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeUpdateObjectFactory: UniffiObjectFactory<UpdateInterface> = {
  create(pointer: UnsafeMutableRawPointer): UpdateInterface {
    const instance = Object.create(Update.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'Update';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_update_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: UpdateInterface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: UpdateInterface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_update(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_update(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is UpdateInterface {
    return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Update';
  },
};
// FfiConverter for UpdateInterface
const FfiConverterTypeUpdate = new FfiConverterObject(
  uniffiTypeUpdateObjectFactory
);

export interface WalletTxInterface {
  balance(): Map<AssetId, /*i64*/ bigint>;
  fee(): /*u64*/ bigint;
  height(): /*u32*/ number | undefined;
  inputs(): Array<WalletTxOutInterface | undefined>;
  outputs(): Array<WalletTxOutInterface | undefined>;
  timestamp(): /*u32*/ number | undefined;
  tx(): TransactionInterface;
  txid(): TxidInterface;
  type(): string;
  unblindedUrl(explorerUrl: string): string;
}

export class WalletTx
  extends UniffiAbstractObject
  implements WalletTxInterface
{
  readonly [uniffiTypeNameSymbol] = 'WalletTx';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeWalletTxObjectFactory.bless(pointer);
  }

  public balance(): Map<AssetId, /*i64*/ bigint> {
    return FfiConverterMapTypeAssetIdInt64.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettx_balance(
            uniffiTypeWalletTxObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public fee(): /*u64*/ bigint {
    return FfiConverterUInt64.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettx_fee(
            uniffiTypeWalletTxObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public height(): /*u32*/ number | undefined {
    return FfiConverterOptionalUInt32.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettx_height(
            uniffiTypeWalletTxObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public inputs(): Array<WalletTxOutInterface | undefined> {
    return FfiConverterArrayOptionalTypeWalletTxOut.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettx_inputs(
            uniffiTypeWalletTxObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public outputs(): Array<WalletTxOutInterface | undefined> {
    return FfiConverterArrayOptionalTypeWalletTxOut.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettx_outputs(
            uniffiTypeWalletTxObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public timestamp(): /*u32*/ number | undefined {
    return FfiConverterOptionalUInt32.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettx_timestamp(
            uniffiTypeWalletTxObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public tx(): TransactionInterface {
    return FfiConverterTypeTransaction.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettx_tx(
            uniffiTypeWalletTxObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public txid(): TxidInterface {
    return FfiConverterTypeTxid.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettx_txid(
            uniffiTypeWalletTxObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public type(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettx_type_(
            uniffiTypeWalletTxObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public unblindedUrl(explorerUrl: string): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettx_unblinded_url(
            uniffiTypeWalletTxObjectFactory.clonePointer(this),
            FfiConverterString.lower(explorerUrl),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeWalletTxObjectFactory.pointer(this);
      uniffiTypeWalletTxObjectFactory.freePointer(pointer);
      uniffiTypeWalletTxObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is WalletTx {
    return uniffiTypeWalletTxObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeWalletTxObjectFactory: UniffiObjectFactory<WalletTxInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): WalletTxInterface {
      const instance = Object.create(WalletTx.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'WalletTx';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_wallettx_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: WalletTxInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: WalletTxInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_wallettx(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_wallettx(pointer, callStatus),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is WalletTxInterface {
      return (
        obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'WalletTx'
      );
    },
  };
// FfiConverter for WalletTxInterface
const FfiConverterTypeWalletTx = new FfiConverterObject(
  uniffiTypeWalletTxObjectFactory
);

export interface WalletTxOutInterface {
  address(): AddressInterface;
  extInt(): Chain;
  height(): /*u32*/ number | undefined;
  outpoint(): OutPointInterface;
  scriptPubkey(): ScriptInterface;
  unblinded(): TxOutSecretsInterface;
  wildcardIndex(): /*u32*/ number;
}

export class WalletTxOut
  extends UniffiAbstractObject
  implements WalletTxOutInterface
{
  readonly [uniffiTypeNameSymbol] = 'WalletTxOut';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  // No primary constructor declared for this class.
  private constructor(pointer: UnsafeMutableRawPointer) {
    super();
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeWalletTxOutObjectFactory.bless(pointer);
  }

  public address(): AddressInterface {
    return FfiConverterTypeAddress.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettxout_address(
            uniffiTypeWalletTxOutObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public extInt(): Chain {
    return FfiConverterTypeChain.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettxout_ext_int(
            uniffiTypeWalletTxOutObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public height(): /*u32*/ number | undefined {
    return FfiConverterOptionalUInt32.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettxout_height(
            uniffiTypeWalletTxOutObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public outpoint(): OutPointInterface {
    return FfiConverterTypeOutPoint.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettxout_outpoint(
            uniffiTypeWalletTxOutObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public scriptPubkey(): ScriptInterface {
    return FfiConverterTypeScript.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettxout_script_pubkey(
            uniffiTypeWalletTxOutObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public unblinded(): TxOutSecretsInterface {
    return FfiConverterTypeTxOutSecrets.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettxout_unblinded(
            uniffiTypeWalletTxOutObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public wildcardIndex(): /*u32*/ number {
    return FfiConverterUInt32.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wallettxout_wildcard_index(
            uniffiTypeWalletTxOutObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeWalletTxOutObjectFactory.pointer(this);
      uniffiTypeWalletTxOutObjectFactory.freePointer(pointer);
      uniffiTypeWalletTxOutObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is WalletTxOut {
    return uniffiTypeWalletTxOutObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeWalletTxOutObjectFactory: UniffiObjectFactory<WalletTxOutInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): WalletTxOutInterface {
      const instance = Object.create(WalletTxOut.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'WalletTxOut';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_wallettxout_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: WalletTxOutInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: WalletTxOutInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_wallettxout(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_wallettxout(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is WalletTxOutInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'WalletTxOut'
      );
    },
  };
// FfiConverter for WalletTxOutInterface
const FfiConverterTypeWalletTxOut = new FfiConverterObject(
  uniffiTypeWalletTxOutObjectFactory
);

/**
 * A Watch-Only wallet, wrapper over [`lwk_wollet::Wollet`]
 */
export interface WolletInterface {
  address(
    index: /*u32*/ number | undefined
  ) /*throws*/ : AddressResultInterface;
  applyUpdate(update: UpdateInterface) /*throws*/ : void;
  balance() /*throws*/ : Map<AssetId, /*u64*/ bigint>;
  descriptor() /*throws*/ : WolletDescriptorInterface;
  finalize(pset: PsetInterface) /*throws*/ : PsetInterface;
  psetDetails(pset: PsetInterface) /*throws*/ : PsetDetailsInterface;
  transactions() /*throws*/ : Array<WalletTxInterface>;
  /**
   * Get all the transaction outputs of the wallet, both spent and unspent
   */
  txos() /*throws*/ : Array<WalletTxOutInterface>;
  /**
   * Get the unspent transaction outputs of the wallet
   */
  utxos() /*throws*/ : Array<WalletTxOutInterface>;
  /**
   * Note this a test method but we are not feature gating in test because we need it in
   * destination language examples
   */
  waitForTx(
    txid: TxidInterface,
    client: ElectrumClientInterface
  ) /*throws*/ : WalletTxInterface;
}

/**
 * A Watch-Only wallet, wrapper over [`lwk_wollet::Wollet`]
 */
export class Wollet extends UniffiAbstractObject implements WolletInterface {
  readonly [uniffiTypeNameSymbol] = 'Wollet';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  /**
   * Construct a Watch-Only wallet object
   */
  constructor(
    network: NetworkInterface,
    descriptor: WolletDescriptorInterface,
    datadir: string | undefined
  ) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_wollet_new(
          FfiConverterTypeNetwork.lower(network),
          FfiConverterTypeWolletDescriptor.lower(descriptor),
          FfiConverterOptionalString.lower(datadir),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] = uniffiTypeWolletObjectFactory.bless(pointer);
  }

  /**
   * Construct a Watch-Only wallet object with a caller provided persister
   */
  public static withCustomPersister(
    network: NetworkInterface,
    descriptor: WolletDescriptorInterface,
    persister: ForeignPersisterLinkInterface
  ): WolletInterface /*throws*/ {
    return FfiConverterTypeWollet.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_constructor_wollet_with_custom_persister(
            FfiConverterTypeNetwork.lower(network),
            FfiConverterTypeWolletDescriptor.lower(descriptor),
            FfiConverterTypeForeignPersisterLink.lower(persister),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public address(
    index: /*u32*/ number | undefined
  ): AddressResultInterface /*throws*/ {
    return FfiConverterTypeAddressResult.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wollet_address(
            uniffiTypeWolletObjectFactory.clonePointer(this),
            FfiConverterOptionalUInt32.lower(index),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public applyUpdate(update: UpdateInterface): void /*throws*/ {
    uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        nativeModule().ubrn_uniffi_lwk_fn_method_wollet_apply_update(
          uniffiTypeWolletObjectFactory.clonePointer(this),
          FfiConverterTypeUpdate.lower(update),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
  }

  public balance(): Map<AssetId, /*u64*/ bigint> /*throws*/ {
    return FfiConverterMapTypeAssetIdUInt64.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wollet_balance(
            uniffiTypeWolletObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public descriptor(): WolletDescriptorInterface /*throws*/ {
    return FfiConverterTypeWolletDescriptor.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wollet_descriptor(
            uniffiTypeWolletObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public finalize(pset: PsetInterface): PsetInterface /*throws*/ {
    return FfiConverterTypePset.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wollet_finalize(
            uniffiTypeWolletObjectFactory.clonePointer(this),
            FfiConverterTypePset.lower(pset),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public psetDetails(pset: PsetInterface): PsetDetailsInterface /*throws*/ {
    return FfiConverterTypePsetDetails.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wollet_pset_details(
            uniffiTypeWolletObjectFactory.clonePointer(this),
            FfiConverterTypePset.lower(pset),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public transactions(): Array<WalletTxInterface> /*throws*/ {
    return FfiConverterArrayTypeWalletTx.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wollet_transactions(
            uniffiTypeWolletObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Get all the transaction outputs of the wallet, both spent and unspent
   */
  public txos(): Array<WalletTxOutInterface> /*throws*/ {
    return FfiConverterArrayTypeWalletTxOut.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wollet_txos(
            uniffiTypeWolletObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Get the unspent transaction outputs of the wallet
   */
  public utxos(): Array<WalletTxOutInterface> /*throws*/ {
    return FfiConverterArrayTypeWalletTxOut.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wollet_utxos(
            uniffiTypeWolletObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Note this a test method but we are not feature gating in test because we need it in
   * destination language examples
   */
  public waitForTx(
    txid: TxidInterface,
    client: ElectrumClientInterface
  ): WalletTxInterface /*throws*/ {
    return FfiConverterTypeWalletTx.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wollet_wait_for_tx(
            uniffiTypeWolletObjectFactory.clonePointer(this),
            FfiConverterTypeTxid.lower(txid),
            FfiConverterTypeElectrumClient.lower(client),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeWolletObjectFactory.pointer(this);
      uniffiTypeWolletObjectFactory.freePointer(pointer);
      uniffiTypeWolletObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is Wollet {
    return uniffiTypeWolletObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeWolletObjectFactory: UniffiObjectFactory<WolletInterface> = {
  create(pointer: UnsafeMutableRawPointer): WolletInterface {
    const instance = Object.create(Wollet.prototype);
    instance[pointerLiteralSymbol] = pointer;
    instance[destructorGuardSymbol] = this.bless(pointer);
    instance[uniffiTypeNameSymbol] = 'Wollet';
    return instance;
  },

  bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
    return uniffiCaller.rustCall(
      /*caller:*/ (status) =>
        nativeModule().ubrn_uniffi_internal_fn_method_wollet_ffi__bless_pointer(
          p,
          status
        ),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  unbless(ptr: UniffiRustArcPtr) {
    ptr.markDestroyed();
  },

  pointer(obj: WolletInterface): UnsafeMutableRawPointer {
    if ((obj as any)[destructorGuardSymbol] === undefined) {
      throw new UniffiInternalError.UnexpectedNullPointer();
    }
    return (obj as any)[pointerLiteralSymbol];
  },

  clonePointer(obj: WolletInterface): UnsafeMutableRawPointer {
    const pointer = this.pointer(obj);
    return uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_clone_wollet(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  freePointer(pointer: UnsafeMutableRawPointer): void {
    uniffiCaller.rustCall(
      /*caller:*/ (callStatus) =>
        nativeModule().ubrn_uniffi_lwk_fn_free_wollet(pointer, callStatus),
      /*liftString:*/ FfiConverterString.lift
    );
  },

  isConcreteType(obj: any): obj is WolletInterface {
    return obj[destructorGuardSymbol] && obj[uniffiTypeNameSymbol] === 'Wollet';
  },
};
// FfiConverter for WolletInterface
const FfiConverterTypeWollet = new FfiConverterObject(
  uniffiTypeWolletObjectFactory
);

/**
 * The output descriptors, wrapper over [`lwk_wollet::WolletDescriptor`]
 */
export interface WolletDescriptorInterface {
  /**
   * Derive the private blinding key
   */
  deriveBlindingKey(
    scriptPubkey: ScriptInterface
  ): SecretKeyInterface | undefined;
  isMainnet(): boolean;
  /**
   * Derive a scriptpubkey
   */
  scriptPubkey(
    extInt: Chain,
    index: /*u32*/ number
  ) /*throws*/ : ScriptInterface;
}

/**
 * The output descriptors, wrapper over [`lwk_wollet::WolletDescriptor`]
 */
export class WolletDescriptor
  extends UniffiAbstractObject
  implements WolletDescriptorInterface
{
  readonly [uniffiTypeNameSymbol] = 'WolletDescriptor';
  readonly [destructorGuardSymbol]: UniffiRustArcPtr;
  readonly [pointerLiteralSymbol]: UnsafeMutableRawPointer;
  constructor(descriptor: string) /*throws*/ {
    super();
    const pointer = uniffiCaller.rustCallWithError(
      /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
        FfiConverterTypeLwkError
      ),
      /*caller:*/ (callStatus) => {
        return nativeModule().ubrn_uniffi_lwk_fn_constructor_wolletdescriptor_new(
          FfiConverterString.lower(descriptor),
          callStatus
        );
      },
      /*liftString:*/ FfiConverterString.lift
    );
    this[pointerLiteralSymbol] = pointer;
    this[destructorGuardSymbol] =
      uniffiTypeWolletDescriptorObjectFactory.bless(pointer);
  }

  /**
   * Derive the private blinding key
   */
  public deriveBlindingKey(
    scriptPubkey: ScriptInterface
  ): SecretKeyInterface | undefined {
    return FfiConverterOptionalTypeSecretKey.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wolletdescriptor_derive_blinding_key(
            uniffiTypeWolletDescriptorObjectFactory.clonePointer(this),
            FfiConverterTypeScript.lower(scriptPubkey),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  public isMainnet(): boolean {
    return FfiConverterBool.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wolletdescriptor_is_mainnet(
            uniffiTypeWolletDescriptorObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Derive a scriptpubkey
   */
  public scriptPubkey(
    extInt: Chain,
    index: /*u32*/ number
  ): ScriptInterface /*throws*/ {
    return FfiConverterTypeScript.lift(
      uniffiCaller.rustCallWithError(
        /*liftError:*/ FfiConverterTypeLwkError.lift.bind(
          FfiConverterTypeLwkError
        ),
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wolletdescriptor_script_pubkey(
            uniffiTypeWolletDescriptorObjectFactory.clonePointer(this),
            FfiConverterTypeChain.lower(extInt),
            FfiConverterUInt32.lower(index),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * Calls into the `WolletDescriptorInterface::to_string()` method of the native Rust peer.
   *
   * Generated by deriving the `Display` trait in Rust.
   */
  toString(): string {
    return FfiConverterString.lift(
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) => {
          return nativeModule().ubrn_uniffi_lwk_fn_method_wolletdescriptor_uniffi_trait_display(
            uniffiTypeWolletDescriptorObjectFactory.clonePointer(this),
            callStatus
          );
        },
        /*liftString:*/ FfiConverterString.lift
      )
    );
  }

  /**
   * {@inheritDoc uniffi-bindgen-react-native#UniffiAbstractObject.uniffiDestroy}
   */
  uniffiDestroy(): void {
    const ptr = (this as any)[destructorGuardSymbol];
    if (ptr !== undefined) {
      const pointer = uniffiTypeWolletDescriptorObjectFactory.pointer(this);
      uniffiTypeWolletDescriptorObjectFactory.freePointer(pointer);
      uniffiTypeWolletDescriptorObjectFactory.unbless(ptr);
      delete (this as any)[destructorGuardSymbol];
    }
  }

  static instanceOf(obj: any): obj is WolletDescriptor {
    return uniffiTypeWolletDescriptorObjectFactory.isConcreteType(obj);
  }
}

const uniffiTypeWolletDescriptorObjectFactory: UniffiObjectFactory<WolletDescriptorInterface> =
  {
    create(pointer: UnsafeMutableRawPointer): WolletDescriptorInterface {
      const instance = Object.create(WolletDescriptor.prototype);
      instance[pointerLiteralSymbol] = pointer;
      instance[destructorGuardSymbol] = this.bless(pointer);
      instance[uniffiTypeNameSymbol] = 'WolletDescriptor';
      return instance;
    },

    bless(p: UnsafeMutableRawPointer): UniffiRustArcPtr {
      return uniffiCaller.rustCall(
        /*caller:*/ (status) =>
          nativeModule().ubrn_uniffi_internal_fn_method_wolletdescriptor_ffi__bless_pointer(
            p,
            status
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    unbless(ptr: UniffiRustArcPtr) {
      ptr.markDestroyed();
    },

    pointer(obj: WolletDescriptorInterface): UnsafeMutableRawPointer {
      if ((obj as any)[destructorGuardSymbol] === undefined) {
        throw new UniffiInternalError.UnexpectedNullPointer();
      }
      return (obj as any)[pointerLiteralSymbol];
    },

    clonePointer(obj: WolletDescriptorInterface): UnsafeMutableRawPointer {
      const pointer = this.pointer(obj);
      return uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_clone_wolletdescriptor(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    freePointer(pointer: UnsafeMutableRawPointer): void {
      uniffiCaller.rustCall(
        /*caller:*/ (callStatus) =>
          nativeModule().ubrn_uniffi_lwk_fn_free_wolletdescriptor(
            pointer,
            callStatus
          ),
        /*liftString:*/ FfiConverterString.lift
      );
    },

    isConcreteType(obj: any): obj is WolletDescriptorInterface {
      return (
        obj[destructorGuardSymbol] &&
        obj[uniffiTypeNameSymbol] === 'WolletDescriptor'
      );
    },
  };
// FfiConverter for WolletDescriptorInterface
const FfiConverterTypeWolletDescriptor = new FfiConverterObject(
  uniffiTypeWolletDescriptorObjectFactory
);

// FfiConverter for /*f32*/number | undefined
const FfiConverterOptionalFloat32 = new FfiConverterOptional(
  FfiConverterFloat32
);

// FfiConverter for string | undefined
const FfiConverterOptionalString = new FfiConverterOptional(FfiConverterString);

// FfiConverter for /*u32*/number | undefined
const FfiConverterOptionalUInt32 = new FfiConverterOptional(FfiConverterUInt32);

// FfiConverter for /*u64*/bigint | undefined
const FfiConverterOptionalUInt64 = new FfiConverterOptional(FfiConverterUInt64);

// FfiConverter for /*u8*/number | undefined
const FfiConverterOptionalUInt8 = new FfiConverterOptional(FfiConverterUInt8);

// FfiConverter for Map<AssetId, /*i64*/bigint>
const FfiConverterMapTypeAssetIdInt64 = new FfiConverterMap(
  FfiConverterTypeAssetId,
  FfiConverterInt64
);

// FfiConverter for Map<AssetId, /*u64*/bigint>
const FfiConverterMapTypeAssetIdUInt64 = new FfiConverterMap(
  FfiConverterTypeAssetId,
  FfiConverterUInt64
);

// FfiConverter for AssetId | undefined
const FfiConverterOptionalTypeAssetId = new FfiConverterOptional(
  FfiConverterTypeAssetId
);

// FfiConverter for AddressInterface | undefined
const FfiConverterOptionalTypeAddress = new FfiConverterOptional(
  FfiConverterTypeAddress
);

// FfiConverter for ContractInterface | undefined
const FfiConverterOptionalTypeContract = new FfiConverterOptional(
  FfiConverterTypeContract
);

// FfiConverter for ScriptInterface | undefined
const FfiConverterOptionalTypeScript = new FfiConverterOptional(
  FfiConverterTypeScript
);

// FfiConverter for SecretKeyInterface | undefined
const FfiConverterOptionalTypeSecretKey = new FfiConverterOptional(
  FfiConverterTypeSecretKey
);

// FfiConverter for TransactionInterface | undefined
const FfiConverterOptionalTypeTransaction = new FfiConverterOptional(
  FfiConverterTypeTransaction
);

// FfiConverter for TxidInterface | undefined
const FfiConverterOptionalTypeTxid = new FfiConverterOptional(
  FfiConverterTypeTxid
);

// FfiConverter for UpdateInterface | undefined
const FfiConverterOptionalTypeUpdate = new FfiConverterOptional(
  FfiConverterTypeUpdate
);

// FfiConverter for WalletTxOutInterface | undefined
const FfiConverterOptionalTypeWalletTxOut = new FfiConverterOptional(
  FfiConverterTypeWalletTxOut
);

// FfiConverter for Array<IssuanceInterface>
const FfiConverterArrayTypeIssuance = new FfiConverterArray(
  FfiConverterTypeIssuance
);

// FfiConverter for Array<OutPointInterface>
const FfiConverterArrayTypeOutPoint = new FfiConverterArray(
  FfiConverterTypeOutPoint
);

// FfiConverter for Array<PsetInputInterface>
const FfiConverterArrayTypePsetInput = new FfiConverterArray(
  FfiConverterTypePsetInput
);

// FfiConverter for Array<PsetSignaturesInterface>
const FfiConverterArrayTypePsetSignatures = new FfiConverterArray(
  FfiConverterTypePsetSignatures
);

// FfiConverter for Array<RecipientInterface>
const FfiConverterArrayTypeRecipient = new FfiConverterArray(
  FfiConverterTypeRecipient
);

// FfiConverter for Array<TxInInterface>
const FfiConverterArrayTypeTxIn = new FfiConverterArray(FfiConverterTypeTxIn);

// FfiConverter for Array<TxOutInterface>
const FfiConverterArrayTypeTxOut = new FfiConverterArray(FfiConverterTypeTxOut);

// FfiConverter for Array<WalletTxInterface>
const FfiConverterArrayTypeWalletTx = new FfiConverterArray(
  FfiConverterTypeWalletTx
);

// FfiConverter for Array<WalletTxOutInterface>
const FfiConverterArrayTypeWalletTxOut = new FfiConverterArray(
  FfiConverterTypeWalletTxOut
);

// FfiConverter for Array<WalletTxOutInterface | undefined>
const FfiConverterArrayOptionalTypeWalletTxOut = new FfiConverterArray(
  FfiConverterOptionalTypeWalletTxOut
);

/**
 * This should be called before anything else.
 *
 * It is likely that this is being done for you by the library's `index.ts`.
 *
 * It checks versions of uniffi between when the Rust scaffolding was generated
 * and when the bindings were generated.
 *
 * It also initializes the machinery to enable Rust to talk back to Javascript.
 */
function uniffiEnsureInitialized() {
  // Get the bindings contract version from our ComponentInterface
  const bindingsContractVersion = 26;
  // Get the scaffolding contract version by calling the into the dylib
  const scaffoldingContractVersion =
    nativeModule().ubrn_ffi_lwk_uniffi_contract_version();
  if (bindingsContractVersion !== scaffoldingContractVersion) {
    throw new UniffiInternalError.ContractVersionMismatch(
      scaffoldingContractVersion,
      bindingsContractVersion
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_func_is_provably_segwit() !== 25275
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_func_is_provably_segwit'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_address_is_blinded() !==
    34440
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_address_is_blinded'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_address_qr_code_text() !==
    34918
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_address_qr_code_text'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_address_qr_code_uri() !==
    36127
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_address_qr_code_uri'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_address_script_pubkey() !==
    23569
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_address_script_pubkey'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_address_to_unconfidential() !==
    28990
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_address_to_unconfidential'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_addressresult_address() !==
    57079
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_addressresult_address'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_addressresult_index() !==
    6170
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_addressresult_index'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_amp2_cosign() !== 5581) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_amp2_cosign'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_amp2_descriptor_from_str() !==
    752
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_amp2_descriptor_from_str'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_amp2_register() !== 53300
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_amp2_register'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_amp2descriptor_descriptor() !==
    61502
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_amp2descriptor_descriptor'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_electrumclient_broadcast() !==
    41537
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_electrumclient_broadcast'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_electrumclient_full_scan() !==
    5919
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_electrumclient_full_scan'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_electrumclient_full_scan_to_index() !==
    64210
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_electrumclient_full_scan_to_index'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_electrumclient_ping() !==
    49466
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_electrumclient_ping'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_esploraclient_broadcast() !==
    54439
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_esploraclient_broadcast'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_esploraclient_full_scan() !==
    27446
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_esploraclient_full_scan'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_esploraclient_full_scan_to_index() !==
    37814
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_esploraclient_full_scan_to_index'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_foreignpersister_get() !==
    54855
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_foreignpersister_get'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_foreignpersister_push() !==
    22972
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_foreignpersister_push'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_issuance_asset() !== 59545
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_issuance_asset'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_issuance_is_issuance() !==
    36847
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_issuance_is_issuance'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_issuance_is_reissuance() !==
    19752
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_issuance_is_reissuance'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_issuance_prev_txid() !==
    29158
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_issuance_prev_txid'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_issuance_prev_vout() !==
    47940
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_issuance_prev_vout'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_issuance_token() !== 31197
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_issuance_token'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_network_default_electrum_client() !==
    57493
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_network_default_electrum_client'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_network_default_esplora_client() !==
    7540
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_network_default_esplora_client'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_network_is_mainnet() !==
    38901
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_network_is_mainnet'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_network_policy_asset() !==
    61043
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_network_policy_asset'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_network_tx_builder() !==
    62021
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_network_tx_builder'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_outpoint_txid() !== 59660
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_outpoint_txid'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_outpoint_vout() !== 56493
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_outpoint_vout'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_precision_sats_to_string() !==
    20274
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_precision_sats_to_string'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_precision_string_to_sats() !==
    26556
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_precision_string_to_sats'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_pset_extract_tx() !== 24108
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_pset_extract_tx'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_pset_finalize() !== 8805) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_pset_finalize'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_pset_inputs() !== 59953) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_pset_inputs'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetbalance_balances() !==
    30248
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetbalance_balances'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetbalance_fee() !== 45919
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetbalance_fee'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetbalance_recipients() !==
    28110
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetbalance_recipients'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetdetails_balance() !==
    56410
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetdetails_balance'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetdetails_inputs_issuances() !==
    57319
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetdetails_inputs_issuances'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetdetails_signatures() !==
    49463
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetdetails_signatures'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetinput_issuance_asset() !==
    63028
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetinput_issuance_asset'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetinput_issuance_token() !==
    28592
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetinput_issuance_token'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetinput_previous_script_pubkey() !==
    29126
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetinput_previous_script_pubkey'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetinput_previous_txid() !==
    21436
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetinput_previous_txid'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetinput_previous_vout() !==
    7375
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetinput_previous_vout'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetinput_redeem_script() !==
    44187
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetinput_redeem_script'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetsignatures_has_signature() !==
    62742
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetsignatures_has_signature'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_psetsignatures_missing_signature() !==
    6208
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_psetsignatures_missing_signature'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_recipient_address() !== 44409
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_recipient_address'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_recipient_asset() !== 23419
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_recipient_asset'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_recipient_value() !== 39598
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_recipient_value'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_recipient_vout() !== 24321
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_recipient_vout'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_script_asm() !== 38627) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_script_asm'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_script_bytes() !== 31898) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_script_bytes'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_secretkey_bytes() !== 44270
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_secretkey_bytes'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_signer_keyorigin_xpub() !==
    15198
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_signer_keyorigin_xpub'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_signer_mnemonic() !== 29480
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_signer_mnemonic'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_signer_sign() !== 38559) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_signer_sign'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_signer_wpkh_slip77_descriptor() !==
    55215
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_signer_wpkh_slip77_descriptor'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_testenv_electrum_url() !==
    37727
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_testenv_electrum_url'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_testenv_generate() !== 4725
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_testenv_generate'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_testenv_get_new_address() !==
    11090
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_testenv_get_new_address'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_testenv_height() !== 18988
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_testenv_height'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_testenv_issue_asset() !==
    13400
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_testenv_issue_asset'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_testenv_send_to_address() !==
    8497
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_testenv_send_to_address'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_transaction_bytes() !== 35387
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_transaction_bytes'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_transaction_fee() !== 42284
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_transaction_fee'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_transaction_inputs() !==
    51474
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_transaction_inputs'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_transaction_outputs() !==
    59927
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_transaction_outputs'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_transaction_txid() !== 8927
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_transaction_txid'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txbuilder_add_burn() !== 9804
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txbuilder_add_burn'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txbuilder_add_lbtc_recipient() !==
    895
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txbuilder_add_lbtc_recipient'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txbuilder_add_recipient() !==
    56700
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txbuilder_add_recipient'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txbuilder_drain_lbtc_to() !==
    34381
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txbuilder_drain_lbtc_to'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txbuilder_drain_lbtc_wallet() !==
    46356
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txbuilder_drain_lbtc_wallet'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txbuilder_fee_rate() !==
    52577
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txbuilder_fee_rate'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txbuilder_finish() !== 3994
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txbuilder_finish'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txbuilder_issue_asset() !==
    32494
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txbuilder_issue_asset'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txbuilder_reissue_asset() !==
    54385
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txbuilder_reissue_asset'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txbuilder_set_wallet_utxos() !==
    12661
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txbuilder_set_wallet_utxos'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txin_outpoint() !== 60750
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txin_outpoint'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_txout_asset() !== 43008) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txout_asset'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_txout_is_fee() !== 30808) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txout_is_fee'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txout_is_partially_blinded() !==
    10893
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txout_is_partially_blinded'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txout_script_pubkey() !==
    7466
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txout_script_pubkey'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txout_unblind() !== 11168
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txout_unblind'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_txout_value() !== 6745) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txout_value'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txoutsecrets_asset() !==
    21742
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txoutsecrets_asset'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txoutsecrets_asset_bf() !==
    27606
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txoutsecrets_asset_bf'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txoutsecrets_value() !==
    64117
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txoutsecrets_value'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_txoutsecrets_value_bf() !==
    4095
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txoutsecrets_value_bf'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_txid_bytes() !== 15950) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_txid_bytes'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_update_only_tip() !== 55966
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_update_only_tip'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_update_serialize() !== 9990
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_update_serialize'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettx_balance() !== 44398
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettx_balance'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_wallettx_fee() !== 39011) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettx_fee'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettx_height() !== 12656
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettx_height'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettx_inputs() !== 3951
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettx_inputs'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettx_outputs() !== 55588
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettx_outputs'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettx_timestamp() !==
    12633
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettx_timestamp'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_wallettx_tx() !== 23689) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettx_tx'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettx_txid() !== 36652
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettx_txid'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettx_type_() !== 59416
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettx_type_'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettx_unblinded_url() !==
    45766
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettx_unblinded_url'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettxout_address() !==
    55633
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettxout_address'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettxout_ext_int() !==
    60402
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettxout_ext_int'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettxout_height() !==
    50237
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettxout_height'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettxout_outpoint() !==
    58785
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettxout_outpoint'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettxout_script_pubkey() !==
    50610
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettxout_script_pubkey'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettxout_unblinded() !==
    57421
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettxout_unblinded'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wallettxout_wildcard_index() !==
    49286
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wallettxout_wildcard_index'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wollet_address() !== 14903
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wollet_address'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wollet_apply_update() !==
    55233
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wollet_apply_update'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wollet_balance() !== 6265
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wollet_balance'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wollet_descriptor() !== 25068
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wollet_descriptor'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wollet_finalize() !== 63816
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wollet_finalize'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wollet_pset_details() !==
    45882
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wollet_pset_details'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wollet_transactions() !==
    35692
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wollet_transactions'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_wollet_txos() !== 19061) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wollet_txos'
    );
  }
  if (nativeModule().ubrn_uniffi_lwk_checksum_method_wollet_utxos() !== 3120) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wollet_utxos'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wollet_wait_for_tx() !==
    47828
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wollet_wait_for_tx'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wolletdescriptor_derive_blinding_key() !==
    27121
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wolletdescriptor_derive_blinding_key'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wolletdescriptor_is_mainnet() !==
    62487
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wolletdescriptor_is_mainnet'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_method_wolletdescriptor_script_pubkey() !==
    21566
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_method_wolletdescriptor_script_pubkey'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_address_new() !== 52129
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_address_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_amp2_new_testnet() !==
    61837
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_amp2_new_testnet'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_bip_new_bip49() !==
    34169
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_bip_new_bip49'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_bip_new_bip84() !==
    26707
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_bip_new_bip84'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_bip_new_bip87() !==
    60988
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_bip_new_bip87'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_contract_new() !== 55905
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_contract_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_electrumclient_new() !==
    26281
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_electrumclient_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_esploraclient_new() !==
    42490
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_esploraclient_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_esploraclient_new_waterfalls() !==
    40758
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_esploraclient_new_waterfalls'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_foreignpersisterlink_new() !==
    13549
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_foreignpersisterlink_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_mnemonic_from_entropy() !==
    36360
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_mnemonic_from_entropy'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_mnemonic_from_random() !==
    35644
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_mnemonic_from_random'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_mnemonic_new() !== 33187
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_mnemonic_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_network_mainnet() !==
    55931
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_network_mainnet'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_network_regtest() !==
    26689
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_network_regtest'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_network_regtest_default() !==
    53192
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_network_regtest_default'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_network_testnet() !==
    37103
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_network_testnet'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_outpoint_new() !== 61639
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_outpoint_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_precision_new() !== 7694
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_precision_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_pset_new() !== 61694
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_pset_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_script_new() !== 43814
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_script_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_secretkey_from_bytes() !==
    14021
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_secretkey_from_bytes'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_signer_new() !== 16701
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_signer_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_signer_random() !==
    54097
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_signer_random'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_testenv_new() !== 46965
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_testenv_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_transaction_new() !==
    3065
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_transaction_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_txbuilder_new() !==
    56158
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_txbuilder_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_txid_new() !== 63870
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_txid_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_update_new() !== 35370
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_update_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_wollet_new() !== 15308
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_wollet_new'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_wollet_with_custom_persister() !==
    63220
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_wollet_with_custom_persister'
    );
  }
  if (
    nativeModule().ubrn_uniffi_lwk_checksum_constructor_wolletdescriptor_new() !==
    57700
  ) {
    throw new UniffiInternalError.ApiChecksumMismatch(
      'uniffi_lwk_checksum_constructor_wolletdescriptor_new'
    );
  }

  uniffiCallbackInterfaceForeignPersister.register();
}

export default Object.freeze({
  initialize: uniffiEnsureInitialized,
  converters: {
    FfiConverterTypeAddress,
    FfiConverterTypeAddressResult,
    FfiConverterTypeAmp2,
    FfiConverterTypeAmp2Descriptor,
    FfiConverterTypeAssetId,
    FfiConverterTypeBip,
    FfiConverterTypeChain,
    FfiConverterTypeContract,
    FfiConverterTypeElectrumClient,
    FfiConverterTypeEsploraClient,
    FfiConverterTypeForeignPersister,
    FfiConverterTypeForeignPersisterLink,
    FfiConverterTypeHex,
    FfiConverterTypeIssuance,
    FfiConverterTypeMnemonic,
    FfiConverterTypeNetwork,
    FfiConverterTypeOutPoint,
    FfiConverterTypePrecision,
    FfiConverterTypePset,
    FfiConverterTypePsetBalance,
    FfiConverterTypePsetDetails,
    FfiConverterTypePsetInput,
    FfiConverterTypePsetSignatures,
    FfiConverterTypeRecipient,
    FfiConverterTypeScript,
    FfiConverterTypeSecretKey,
    FfiConverterTypeSigner,
    FfiConverterTypeTestEnv,
    FfiConverterTypeTransaction,
    FfiConverterTypeTxBuilder,
    FfiConverterTypeTxIn,
    FfiConverterTypeTxOut,
    FfiConverterTypeTxOutSecrets,
    FfiConverterTypeTxid,
    FfiConverterTypeUpdate,
    FfiConverterTypeWalletTx,
    FfiConverterTypeWalletTxOut,
    FfiConverterTypeWollet,
    FfiConverterTypeWolletDescriptor,
  },
});
